<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学文の博客🥝</title>
  
  
  <link href="https://wenblog.org.edu.kg/atom.xml" rel="self"/>
  
  <link href="https://wenblog.org.edu.kg/"/>
  <updated>2025-06-22T01:33:04.792Z</updated>
  <id>https://wenblog.org.edu.kg/</id>
  
  <author>
    <name>学文の博客🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-22T01:31:10.543Z</published>
    <updated>2025-06-22T01:33:04.792Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python八股文1</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><p><strong>Table of Contents</strong></p><ul><li><a href="#python%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">Python语言特性</a><ul><li><a href="#1-python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">1 Python的函数参数传递</a></li><li><a href="#2-python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BBmetaclass">2 Python中的元类(metaclass)</a></li><li><a href="#3-staticmethod%E5%92%8Cclassmethod">3 @staticmethod和@classmethod</a></li><li><a href="#4-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">4 类变量和实例变量</a></li><li><a href="#5-python%E8%87%AA%E7%9C%81">5 Python自省</a></li><li><a href="#6-%E5%AD%97%E5%85%B8%E6%8E%A8%E5%AF%BC%E5%BC%8F">6 字典推导式</a></li><li><a href="#7-python%E4%B8%AD%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF">7 Python中单下划线和双下划线</a></li><li><a href="#8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8Cformat">8 字符串格式化:\x和.format</a></li><li><a href="#9-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8">9 迭代器和生成器</a></li><li><a href="#10-args-and-kwargs">10 *args and <code>**kwargs</code></a></li><li><a href="#11-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8Baop%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8">11 面向切面编程AOP和装饰器</a></li><li><a href="#12-%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B">12 鸭子类型</a></li><li><a href="#13-python%E4%B8%AD%E9%87%8D%E8%BD%BD">13 Python中重载</a></li><li><a href="#14-%E6%96%B0%E5%BC%8F%E7%B1%BB%E5%92%8C%E6%97%A7%E5%BC%8F%E7%B1%BB">14 新式类和旧式类</a></li><li><a href="#15-__new__%E5%92%8C__init__%E7%9A%84%E5%8C%BA%E5%88%AB">15 __new__和<code><strong>init</strong></code>的区别</a></li><li><a href="#16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">16 单例模式</a><ul><li><a href="#1-%E4%BD%BF%E7%94%A8__new__%E6%96%B9%E6%B3%95">1 使用__new__方法</a></li><li><a href="#2-%E5%85%B1%E4%BA%AB%E5%B1%9E%E6%80%A7">2 共享属性</a></li><li><a href="#3-%E8%A3%85%E9%A5%B0%E5%99%A8%E7%89%88%E6%9C%AC">3 装饰器版本</a></li><li><a href="#4-import%E6%96%B9%E6%B3%95">4 import方法</a></li></ul></li><li><a href="#17-python%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">17 Python中的作用域</a></li><li><a href="#18-gil%E7%BA%BF%E7%A8%8B%E5%85%A8%E5%B1%80%E9%94%81">18 GIL线程全局锁</a></li><li><a href="#19-%E5%8D%8F%E7%A8%8B">19 协程</a></li><li><a href="#20-%E9%97%AD%E5%8C%85">20 闭包</a></li><li><a href="#21-lambda%E5%87%BD%E6%95%B0">21 lambda函数</a></li><li><a href="#22-python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B">22 Python函数式编程</a></li><li><a href="#23-python%E9%87%8C%E7%9A%84%E6%8B%B7%E8%B4%9D">23 Python里的拷贝</a></li><li><a href="#24-python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6">24 Python垃圾回收机制</a><ul><li><a href="#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">1 引用计数</a></li><li><a href="#2-%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%E6%9C%BA%E5%88%B6">2 标记-清除机制</a></li><li><a href="#3-%E5%88%86%E4%BB%A3%E6%8A%80%E6%9C%AF">3 分代技术</a></li></ul></li><li><a href="#25-python%E7%9A%84list">25 Python的List</a></li><li><a href="#26-python%E7%9A%84is">26 Python的is</a></li><li><a href="#27-readreadline%E5%92%8Creadlines">27 read,readline和readlines</a></li><li><a href="#28-python2%E5%92%8C3%E7%9A%84%E5%8C%BA%E5%88%AB">28 Python2和3的区别</a></li><li><a href="#29-super-init">29 super init</a></li><li><a href="#30-range-and-xrange">30 range and xrange</a></li></ul></li><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a><ul><li><a href="#1-selectpoll%E5%92%8Cepoll">1 select,poll和epoll</a></li><li><a href="#2-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95">2 调度算法</a></li><li><a href="#3-%E6%AD%BB%E9%94%81">3 死锁</a></li><li><a href="#4-%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5">4 程序编译与链接</a><ul><li><a href="#1-%E9%A2%84%E5%A4%84%E7%90%86">1 预处理</a></li><li><a href="#2-%E7%BC%96%E8%AF%91">2 编译</a></li><li><a href="#3-%E6%B1%87%E7%BC%96">3 汇编</a></li><li><a href="#4-%E9%93%BE%E6%8E%A5">4 链接</a></li></ul></li><li><a href="#5-%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5">5 静态链接和动态链接</a></li><li><a href="#6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E6%8A%80%E6%9C%AF">6 虚拟内存技术</a></li><li><a href="#7-%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5">7 分页和分段</a><ul><li><a href="#%E5%88%86%E9%A1%B5%E4%B8%8E%E5%88%86%E6%AE%B5%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB">分页与分段的主要区别</a></li></ul></li><li><a href="#8-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95">8 页面置换算法</a></li><li><a href="#9-%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%E5%92%8C%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91">9 边沿触发和水平触发</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a><ul><li><a href="#1-%E4%BA%8B%E5%8A%A1">1 事务</a></li><li><a href="#2-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95">2 数据库索引</a></li><li><a href="#3-redis%E5%8E%9F%E7%90%86">3 Redis原理</a><ul><li><a href="#redis%E6%98%AF%E4%BB%80%E4%B9%88">Redis是什么？</a></li><li><a href="#redis%E6%95%B0%E6%8D%AE%E5%BA%93">Redis数据库</a></li><li><a href="#redis%E7%BC%BA%E7%82%B9">Redis缺点</a></li></ul></li><li><a href="#4-%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81">4 乐观锁和悲观锁</a></li><li><a href="#5-mvcc">5 MVCC</a><ul><li><a href="#mysql%E7%9A%84innodb%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0mvcc%E7%9A%84"><a href="http://lib.csdn.net/base/mysql">MySQL</a>的innodb引擎是如何实现MVCC的</a></li></ul></li><li><a href="#6-myisam%E5%92%8Cinnodb">6 MyISAM和InnoDB</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C">网络</a><ul><li><a href="#1-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">1 三次握手</a></li><li><a href="#2-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">2 四次挥手</a></li><li><a href="#3-arp%E5%8D%8F%E8%AE%AE">3 ARP协议</a></li><li><a href="#4-urllib%E5%92%8Curllib2%E7%9A%84%E5%8C%BA%E5%88%AB">4 urllib和urllib2的区别</a></li><li><a href="#5-post%E5%92%8Cget">5 Post和Get</a></li><li><a href="#6-cookie%E5%92%8Csession">6 Cookie和Session</a></li><li><a href="#7-apache%E5%92%8Cnginx%E7%9A%84%E5%8C%BA%E5%88%AB">7 apache和nginx的区别</a></li><li><a href="#8-%E7%BD%91%E7%AB%99%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%9D%E5%AD%98">8 网站用户密码保存</a></li><li><a href="#9-http%E5%92%8Chttps">9 HTTP和HTTPS</a></li><li><a href="#10-xsrf%E5%92%8Cxss">10 XSRF和XSS</a></li><li><a href="#11-%E5%B9%82%E7%AD%89-idempotence">11 幂等 Idempotence</a></li><li><a href="#12-restful%E6%9E%B6%E6%9E%84soaprpc">12 RESTful架构(SOAP,RPC)</a></li><li><a href="#13-soap">13 SOAP</a></li><li><a href="#14-rpc">14 RPC</a></li><li><a href="#15-cgi%E5%92%8Cwsgi">15 CGI和WSGI</a></li><li><a href="#16-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">16 中间人攻击</a></li><li><a href="#17-c10k%E9%97%AE%E9%A2%98">17 c10k问题</a></li><li><a href="#18-socket">18 socket</a></li><li><a href="#19-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">19 浏览器缓存</a></li><li><a href="#20-http10%E5%92%8Chttp11">20 HTTP1.0和HTTP1.1</a></li><li><a href="#21-ajax">21 Ajax</a></li></ul></li><li><a href="#nix">*NIX</a><ul><li><a href="#unix%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8Fipc">unix进程间通信方式(IPC)</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul><li><a href="#1-%E7%BA%A2%E9%BB%91%E6%A0%91">1 红黑树</a></li></ul></li><li><a href="#%E7%BC%96%E7%A8%8B%E9%A2%98">编程题</a><ul><li><a href="#1-%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">1 台阶问题/斐波那契</a></li><li><a href="#2-%E5%8F%98%E6%80%81%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98">2 变态台阶问题</a></li><li><a href="#3-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96">3 矩形覆盖</a></li><li><a href="#4-%E6%9D%A8%E6%B0%8F%E7%9F%A9%E9%98%B5%E6%9F%A5%E6%89%BE">4 杨氏矩阵查找</a></li><li><a href="#5-%E5%8E%BB%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">5 去除列表中的重复元素</a></li><li><a href="#6-%E9%93%BE%E8%A1%A8%E6%88%90%E5%AF%B9%E8%B0%83%E6%8D%A2">6 链表成对调换</a></li><li><a href="#7-%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%E7%9A%84%E6%96%B9%E6%B3%95">7 创建字典的方法</a><ul><li><a href="#1-%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BA">1 直接创建</a></li><li><a href="#2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">2 工厂方法</a></li><li><a href="#3-fromkeys%E6%96%B9%E6%B3%95">3 fromkeys()方法</a></li></ul></li><li><a href="#8-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">8 合并两个有序列表</a></li><li><a href="#9-%E4%BA%A4%E5%8F%89%E9%93%BE%E8%A1%A8%E6%B1%82%E4%BA%A4%E7%82%B9">9 交叉链表求交点</a></li><li><a href="#10-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">10 二分查找</a></li><li><a href="#11-%E5%BF%AB%E6%8E%92">11 快排</a></li><li><a href="#12-%E6%89%BE%E9%9B%B6%E9%97%AE%E9%A2%98">12 找零问题</a></li><li><a href="#13-%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86%E5%92%8C%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91">13 广度遍历和深度遍历二叉树</a></li><li><a href="#17-%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">17 前中后序遍历</a></li><li><a href="#18-%E6%B1%82%E6%9C%80%E5%A4%A7%E6%A0%91%E6%B7%B1">18 求最大树深</a></li><li><a href="#19-%E6%B1%82%E4%B8%A4%E6%A3%B5%E6%A0%91%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C">19 求两棵树是否相同</a></li><li><a href="#20-%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E5%BA%8F">20 前序中序求后序</a></li><li><a href="#21-%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%86%E7%BD%AE">21 单链表逆置</a></li><li><a href="#22-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%98%E4%BD%8D%E8%AF%8D">22 两个字符串是否是变位词</a></li><li><a href="#23-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98">23 动态规划问题</a></li></ul></li></ul><!-- markdown-toc end --><h1>Python语言特性</h1><h2 id="1-Python的函数参数传递">1 Python的函数参数传递</h2><p>看两个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>):</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。</p><p>通过<code>id</code>来看引用<code>a</code>的内存地址可以比较理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func_in&quot;</span>,<span class="built_in">id</span>(a))   <span class="comment"># func_in 41322472</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;re-point&quot;</span>,<span class="built_in">id</span>(a), <span class="built_in">id</span>(<span class="number">2</span>))   <span class="comment"># re-point 41322448 41322448</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;func_out&quot;</span>,<span class="built_in">id</span>(a), <span class="built_in">id</span>(<span class="number">1</span>))  <span class="comment"># func_out 41322472 41322472</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>注：具体的值在不同电脑上运行时可能不同。</p><p>可以看到，在执行完<code>a = 2</code>之后，<code>a</code>引用中保存的值，即内存地址发生变化，由原来<code>1</code>对象的所在的地址变成了<code>2</code>这个实体对象的内存地址。</p><p>而第2个例子<code>a</code>引用保存的内存值就不会发生变化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;func_in&quot;</span>,<span class="built_in">id</span>(a))  <span class="comment"># func_in 53629256</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;func_out&quot;</span>,<span class="built_in">id</span>(a))     <span class="comment"># func_out 53629256</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点)</p><p>当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.</p><p>如果还不明白的话,这里有更好的解释: <a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p><h2 id="2-Python中的元类-metaclass">2 Python中的元类(metaclass)</h2><p>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a></p><h2 id="3-staticmethod和-classmethod">3 @staticmethod和@classmethod</h2><p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;executing foo(%s)&quot;</span>%(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;executing foo(%s,%s)&quot;</span>%(self,x))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_foo</span>(<span class="params">cls,x</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;executing class_foo(%s,%s)&quot;</span>%(cls,x))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_foo</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;executing static_foo(%s)&quot;</span>%x)</span><br><span class="line"></span><br><span class="line">a=A()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>).类方法一样,只不过它传递的是类而不是实例,<code>A.class_foo(x)</code>.注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.</p><p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p><table><thead><tr><th style="text-align:left">\</th><th style="text-align:left">实例方法</th><th style="text-align:left">类方法</th><th style="text-align:left">静态方法</th></tr></thead><tbody><tr><td style="text-align:left">a = A()</td><td style="text-align:left">a.foo(x)</td><td style="text-align:left">a.class_foo(x)</td><td style="text-align:left">a.static_foo(x)</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">不可用</td><td style="text-align:left">A.class_foo(x)</td><td style="text-align:left">A.static_foo(x)</td></tr></tbody></table><p>更多关于这个问题:</p><ol><li><a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li><li><a href="https://realpython.com/blog/python/instance-class-and-static-methods-demystified/">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li></ol><h2 id="4-类变量和实例变量">4 类变量和实例变量</h2><p><strong>类变量：</strong></p><blockquote><p>​是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p></blockquote><p><strong>实例变量：</strong></p><blockquote><p>实例化之后，每个实例单独拥有的变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    num_of_instance = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line">        Test.num_of_instance += <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="built_in">print</span>(Test.num_of_instance)   <span class="comment"># 0</span></span><br><span class="line">    t1 = Test(<span class="string">&#x27;jack&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(Test.num_of_instance)   <span class="comment"># 1</span></span><br><span class="line">    t2 = Test(<span class="string">&#x27;lucy&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(t1.name , t1.num_of_instance)  <span class="comment"># jack 2</span></span><br><span class="line">    <span class="built_in">print</span>(t2.name , t2.num_of_instance)  <span class="comment"># lucy 2</span></span><br></pre></td></tr></table></figure><blockquote><p>补充的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    name=<span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name=<span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="built_in">print</span>(p1.name)  <span class="comment"># bbb</span></span><br><span class="line"><span class="built_in">print</span>(p2.name)  <span class="comment"># aaa</span></span><br><span class="line"><span class="built_in">print</span>(Person.name)  <span class="comment"># aaa</span></span><br></pre></td></tr></table></figure><p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p><p>可以看看下面的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    name=[]</span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.name)  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span>(p2.name)  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span>(Person.name)  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>当类变量值为可变对象（列表、字典等）时，共享类变量可能会造成意外的结果。</p><p>为了避免变量混淆，推荐使用 self 来定义实例变量，使用类名或 cls 来定义类变量。对于可变对象的类变量，可以在类定义时使用深复制来避免共享。</p><h2 id="5-Python自省">5 Python自省</h2><p>这个也是python彪悍的特性.</p><p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c)) <span class="comment"># &lt;type &#x27;list&#x27;&gt; &lt;type &#x27;dict&#x27;&gt; &lt;type &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a,<span class="built_in">list</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="6-字典推导式">6 字典推导式</h2><p>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> iterable.items()&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Python中单下划线和双下划线">7 Python中单下划线和双下划线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">MyClass</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>            self.__superprivate = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="meta">... </span>            self._semiprivate = <span class="string">&quot;, world!&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(mc.__superprivate)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: myClass instance has no attribute <span class="string">&#x27;__superprivate&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(mc._semiprivate)</span><br><span class="line">, world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(mc.__dict__)</span><br><span class="line">&#123;<span class="string">&#x27;_MyClass__superprivate&#x27;</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;_semiprivate&#x27;</span>: <span class="string">&#x27;, world!&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p><p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p><p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</p><p>详情见:<a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p><p>或者: <a href="http://www.zhihu.com/question/19754941">http://www.zhihu.com/question/19754941</a></p><h2 id="8-字符串格式化-和-format">8 字符串格式化:%和.format</h2><p>.format在许多方面看起来更便利.对于<code>%</code>最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi there %s&quot;</span> % <span class="keyword">name</span></span><br></pre></td></tr></table></figure><p>但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi there %s&quot;</span> <span class="meta">%</span> <span class="comment">(name,)</span>   <span class="attr"># 提供一个单元素的数组而不是一个参数</span></span><br></pre></td></tr></table></figure><p>但是有点丑…format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p><p>你为什么不用它?</p><ul><li>不知道它(在读这个之前)</li><li>为了和Python2.5兼容(譬如logging库建议使用<code>%</code>(<a href="https://github.com/taizilongxu/interview_python/issues/4">issue #4</a>))</li></ul><p><a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format">http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format</a></p><p>Python f-string 是<strong>执行字符串格式化的最新Python 语法</strong>。 自Python 3.6 起可用。 Python f 字符串提供了一种更快，更易读，更简明且不易出错的在Python 中格式化字符串的方式。f 字符串的前缀为f，并使用{}括号评估值。 在冒号后指定用于类型，填充或对齐的格式说明符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>的年龄是<span class="subst">&#123;age&#125;</span>岁！&quot;</span>)    <span class="comment">#小明的年龄是20岁！</span></span><br></pre></td></tr></table></figure><h2 id="9-迭代器和生成器">9 迭代器和生成器</h2><p>这个是stackoverflow里python排名第一的问题,值得一看: <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a></p><p>这是中文版: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a></p><p>这里有个关于生成器的创建问题面试官有考：<br>问：  将列表生成式中[]改成() 之后数据结构是否改变？<br>答案：是，从列表变为生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000028F8B774200</span>&gt;</span><br></pre></td></tr></table></figure><p>通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。</p><p>在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator</p><h2 id="10-args-and-kwargs">10 <code>*args</code> and <code>**kwargs</code></h2><p>用<code>*args</code>和<code>**kwargs</code>只是为了方便并没有强制使用它们.</p><p>当你不确定你的函数里将要传递多少参数时你可以用<code>*args</code>.例如,它可以传递任意数量的参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">print_everything</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">for</span> count, thing <span class="keyword">in</span> <span class="built_in">enumerate</span>(args):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;count&#125;</span>. <span class="subst">&#123;thing&#125;</span>&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_everything(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>)</span><br><span class="line"><span class="number">0.</span> apple</span><br><span class="line"><span class="number">1.</span> banana</span><br><span class="line"><span class="number">2.</span> cabbage</span><br></pre></td></tr></table></figure><p>相似的,<code>**kwargs</code>允许你使用没有事先定义的参数名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">table_things</span>(<span class="params">**kwargs</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;&#123;name&#125; = &#123;value&#125;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table_things(apple = <span class="string">&#x27;fruit&#x27;</span>, cabbage = <span class="string">&#x27;vegetable&#x27;</span>)</span><br><span class="line">cabbage = vegetable</span><br><span class="line">apple = fruit</span><br></pre></td></tr></table></figure><p>你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给<code>*args</code>和<code>**kwargs</code>.命名参数在列表的最前端.例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">table_things</span>(<span class="params">titlestring, **kwargs</span>)</span><br></pre></td></tr></table></figure><p><code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中,但是<code>*args</code>必须在<code>**kwargs</code>前面.</p><p>当调用函数时你也可以用<code>*</code>和<code>**</code>语法.例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">print_three_things</span>(<span class="params">a, b, c</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;a = &#123;a&#125;, b = &#123;b&#125;, c = &#123;c&#125;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">&#x27;aardvark&#x27;</span>, <span class="string">&#x27;baboon&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_three_things(*mylist)</span><br><span class="line"></span><br><span class="line">a = aardvark, b = baboon, c = cat</span><br></pre></td></tr></table></figure><p>就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.</p><p><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs">http://stackoverflow.com/questions/3394835/args-and-kwargs</a></p><h2 id="11-面向切面编程AOP和装饰器">11 面向切面编程AOP和装饰器</h2><p>这个AOP一听起来有点懵,同学面阿里的时候就被问懵了…</p><p>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，<strong>装饰器的作用就是为已经存在的对象添加额外的功能。</strong></p><p>这个问题比较大,推荐: <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python</a></p><p>中文: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html</a></p><h2 id="12-鸭子类型">12 鸭子类型</h2><p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p><p>我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。</p><p>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</p><p>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</p><p>鸭子类型在动态语言中经常使用，非常灵活，使得python不像java那样专门去弄一大堆的设计模式。</p><h2 id="13-Python中重载">13 Python中重载</h2><p>引自知乎:<a href="http://www.zhihu.com/question/20053359">http://www.zhihu.com/question/20053359</a></p><p>函数重载主要是为了解决两个问题。</p><ol><li>可变参数类型。</li><li>可变参数个数。</li></ol><p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p><p>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p><p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p><p>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p><h2 id="14-新式类和旧式类">14 新式类和旧式类</h2><p>这个面试官问了,我说了老半天,不知道他问的真正意图是什么.</p><p><a href="http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python">stackoverflow</a></p><p>这篇文章很好的介绍了新式类的特性: <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></p><p>新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类继承是根据C3算法,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多.</p><blockquote><p>一个旧式类的深度优先的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.foo1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure><p><strong>按照经典类的查找顺序<code>从左到右深度优先</code>的规则，在访问<code>d.foo1()</code>的时候,D这个类是没有的…那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过</strong></p><h2 id="15-new-和-init-的区别">15 <code>__new__</code>和<code>__init__</code>的区别</h2><p>这个<code>__new__</code>确实很少见到,先做了解吧.</p><ol><li><code>__new__</code>是一个静态方法,而<code>__init__</code>是一个实例方法.</li><li><code>__new__</code>方法会返回一个创建的实例,而<code>__init__</code>什么都不返回.</li><li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用.</li><li>当创建一个新实例时调用<code>__new__</code>,初始化一个实例时用<code>__init__</code>.</li></ol><p><a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init">stackoverflow</a></p><p>ps: <code>__metaclass__</code>是创建类时起作用.所以我们可以分别使用<code>__metaclass__</code>,<code>__new__</code>和<code>__init__</code>来分别在类创建,实例创建和实例初始化的时候做一些小手脚.</p><h2 id="16-单例模式">16 单例模式</h2><blockquote><p>​单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p><p><code>__new__()</code>在<code>__init__()</code>之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例<br><strong>这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.</strong></p></blockquote><h3 id="1-使用-new-方法">1 使用<code>__new__</code>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kw</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            orig = <span class="built_in">super</span>(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-共享属性">2 共享属性</h3><p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典,这样它们具有相同的属性和方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Borg</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kw</span>):</span><br><span class="line">        ob = <span class="built_in">super</span>(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass2</span>(<span class="title class_ inherited__">Borg</span>):</span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-装饰器版本">3 装饰器版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getinstance</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="4-import方法">4 import方法</h3><p>作为python的模块是天然的单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to use</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><a href="http://python.jobbole.com/87294/">单例模式伯乐在线详细解释</a></strong></p><h2 id="17-Python中的作用域">17 Python中的作用域</h2><p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p><p>当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：</p><p>本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）</p><h2 id="18-GIL线程全局锁">18 GIL线程全局锁</h2><p>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.<strong>对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</strong></p><p>见<a href="http://www.oschina.net/translate/pythons-hardest-problem">Python 最难的问题</a></p><p>解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).</p><h2 id="19-协程">19 协程</h2><p>知乎被问到了,呵呵哒,跪了</p><p>简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.</p><p>Python里最常见的yield就是协程的思想!可以查看第九个问题.</p><h2 id="20-闭包">20 闭包</h2><p>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p><p>当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p><ol><li>必须有一个内嵌函数</li><li>内嵌函数必须引用外部函数中的变量</li><li>外部函数的返回值必须是内嵌函数</li></ol><p>感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.</p><p>重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.</p><p>闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_time_wrapper</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">improved_func</span>():</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;it takes <span class="subst">&#123;end_time - start_time&#125;</span>s to find all the olds&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> improved_func</span><br><span class="line">    <span class="comment"># 闭包本质上是一个函数</span></span><br><span class="line">    <span class="comment"># 闭包函数的传入参数和返回值都是函数</span></span><br><span class="line">    <span class="comment"># 闭包函数的返回值函数是对传入函数进行增强的函数</span></span><br></pre></td></tr></table></figure><h2 id="21-lambda函数">21 lambda函数</h2><p>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">4</span>))  <span class="comment">#16</span></span><br><span class="line"></span><br><span class="line">g = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(g(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">que</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: a * x * x + b * x + c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种写法</span></span><br><span class="line">f = que(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment">#-18</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 第二种写法</span></span><br><span class="line"><span class="built_in">print</span>(que(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)(<span class="number">5</span>))   <span class="comment">#-18</span></span><br></pre></td></tr></table></figure><p>推荐: <a href="http://www.zhihu.com/question/20125256">知乎</a></p><h2 id="22-Python函数式编程">22 Python函数式编程</h2><p>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.</p><p>推荐: <a href="http://coolshell.cn/articles/10822.html">酷壳</a></p><p>python中函数式编程支持:</p><p>filter 函数的功能相当于过滤器。调用一个布尔函数<code>bool_func</code>来迭代遍历每个seq中的元素；返回一个使<code>bool_seq</code>返回值为true的元素的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;b = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, a)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(b)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x*y,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="23-Python里的拷贝">23 Python里的拷贝</h2><p>引用和copy(),deepcopy()的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]  <span class="comment">#原始对象</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)  <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)  <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)  <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)  <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a = &#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b = &#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d = &#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure><p><strong>浅拷贝: 创建新对象，其内容是原对象的引用。</strong></p><p><strong>深拷贝：和浅拷贝对应，深拷贝拷贝了对象的所有元素，包括多层嵌套的元素。深拷贝出来的对象是一个全新的对象，不再与原来的对象有任何关联。</strong></p><h2 id="24-Python垃圾回收机制">24 Python垃圾回收机制</h2><p>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。</p><h3 id="1-引用计数">1 引用计数</h3><p>PyObject是每个对象必有的内容，其中<code>ob_refcnt</code>就是做为引用计数。当一个对象有新的引用时，它的<code>ob_refcnt</code>就会增加，当引用它的对象被删除，它的<code>ob_refcnt</code>就会减少.引用计数为0时，该对象生命就结束了。</p><p>优点:</p><ol><li>简单</li><li>实时性</li></ol><p>缺点:</p><ol><li>维护引用计数消耗资源</li><li>循环引用</li></ol><h3 id="2-标记-清除机制">2 标记-清除机制</h3><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p><h3 id="3-分代技术">3 分代技术</h3><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p><p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p><p>举例：<br>当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p><h2 id="25-Python的List">25 Python的List</h2><p>推荐: <a href="http://www.jianshu.com/p/J4U6rR">http://www.jianshu.com/p/J4U6rR</a></p><h2 id="26-Python的is">26 Python的is</h2><p>is是对比地址,==是对比值</p><h2 id="27-read-readline和readlines">27 read,readline和readlines</h2><ul><li>read        读取整个文件</li><li>readline    读取下一行,使用生成器方法</li><li>readlines   读取整个文件到一个迭代器以供我们遍历</li></ul><h2 id="28-Python2和3的区别">28 Python2和3的区别</h2><p>推荐：<a href="http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/">Python 2.7.x 与 Python 3.x 的主要差异</a></p><h2 id="29-super-init">29 super init</h2><p>super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already.</p><p>Note that the syntax changed in Python 3.0: you can just say super().<code>__init__</code>() instead of super(ChildB, self).<code>__init__</code>() which IMO is quite a bit nicer.</p><p><a href="http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods">http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods</a></p><p><a href="http://blog.csdn.net/mrlevo520/article/details/51712440">Python2.7中的super方法浅见</a></p><h2 id="30-range-and-xrange">30 range and xrange</h2><p>都在循环时使用，xrange内存性能更好。<br>for i in range(0, 20):<br>for i in xrange(0, 20):<br>What is the difference between range and xrange functions in Python 2.X?<br>range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements.<br>xrange is a sequence object that evaluates lazily.</p><p><a href="http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x">http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x</a></p><h1>操作系统</h1><h2 id="1-select-poll和epoll">1 select,poll和epoll</h2><p>其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了.</p><p>这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的.</p><p><a href="http://www.cnblogs.com/Anker/p/3265058.html">selec,poll和epoll区别总结</a></p><p>基本上select有3个缺点:</p><ol><li>连接数受限</li><li>查找配对速度慢</li><li>数据由内核拷贝到用户态</li></ol><p>poll改善了第一个缺点</p><p>epoll改了三个缺点.</p><p>关于epoll的: <a href="http://www.cnblogs.com/my_life/articles/3968782.html">http://www.cnblogs.com/my_life/articles/3968782.html</a></p><h2 id="2-调度算法">2 调度算法</h2><ol><li>先来先服务(FCFS, First Come First Serve)</li><li>短作业优先(SJF, Shortest Job First)</li><li>最高优先权调度(Priority Scheduling)</li><li>时间片轮转(RR, Round Robin)</li><li>多级反馈队列调度(multilevel feedback queue scheduling)</li></ol><p>常见的调度算法总结:<a href="http://www.jianshu.com/p/6edf8174c1eb">http://www.jianshu.com/p/6edf8174c1eb</a></p><p>实时调度算法:</p><ol><li>最早截至时间优先 EDF</li><li>最低松弛度优先 LLF</li></ol><h2 id="3-死锁">3 死锁</h2><p>原因:</p><ol><li>竞争资源</li><li>程序推进顺序不当</li></ol><p>必要条件:</p><ol><li>互斥条件</li><li>请求和保持条件</li><li>不剥夺条件</li><li>环路等待条件</li></ol><p>处理死锁基本方法:</p><ol><li>预防死锁(摒弃除1以外的条件)</li><li>避免死锁(银行家算法)</li><li>检测死锁(资源分配图)</li><li>解除死锁<ol><li>剥夺资源</li><li>撤销进程</li></ol></li></ol><p>死锁概念处理策略详细介绍:<a href="https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html">https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html</a></p><h2 id="4-程序编译与链接">4 程序编译与链接</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html">http://www.ruanyifeng.com/blog/2014/11/compiler.html</a></p><p>Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking)</p><p>以c语言为例:</p><h3 id="1-预处理">1 预处理</h3><p>预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有：</p><ol><li>将所有的“#define”删除，并展开所用的宏定义</li><li>处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif”</li><li>处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的</li><li>删除所有注释</li><li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号</li><li>保留所有的#pragma编译器指令。</li></ol><h3 id="2-编译">2 编译</h3><p>编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。</p><h3 id="3-汇编">3 汇编</h3><p>汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File)</p><h3 id="4-链接">4 链接</h3><p>链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。<br>链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。</p><h2 id="5-静态链接和动态链接">5 静态链接和动态链接</h2><p>静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来<br>静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库</p><p>动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序</p><h2 id="6-虚拟内存技术">6 虚拟内存技术</h2><p>虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统.</p><h2 id="7-分页和分段">7 分页和分段</h2><p>分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。</p><p>分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。</p><h3 id="分页与分段的主要区别">分页与分段的主要区别</h3><ol><li>页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.</li><li>页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.</li><li>分页的作业地址空间是一维的、分段的地址空间是二维的。</li></ol><h2 id="8-页面置换算法">8 页面置换算法</h2><p>页面置换：在地址映射过程中，若所要访问的页面不在内存中，则产生了‘缺页中断(page fault)’。此时操作系统必须在内存中选择一个页面将其移出内存，为即将调入的页面让出空间。</p><ol><li>最佳置换算法 OPT (optional replacement)：被替换的页面为在未来最长时间内不会被访问的页面，可保证最低的缺页率，但不可能实现，主要用于评估算法。</li><li>先进先出 FIFO：最易实现，但会频繁换页，性能差。</li><li>最近最久未使用算法 LRU (Least Recently Used)：最近一段时间里最久没有使用过的页面予以置换。</li><li>时钟替换算法 (Clock)：依照使用位替换页面。</li></ol><h2 id="9-边沿触发和水平触发">9 边沿触发和水平触发</h2><ol><li>边沿触发 (Edge Trigger)：自上次状态改变后有新的 I/O 事件就会触发通知，需要尽可能多的执行 I/O 操作。</li><li>水平触发 (Level Trigger)：准备就绪时（可非阻塞地执行 I/O 系统调用）触发通知，可在任意时刻重复检测 I/O 状态。</li></ol><h1>数据库</h1><h2 id="1-事务">1 事务</h2><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。<br>彻底理解数据库事务: <a href="http://www.hollischuang.com/archives/898">http://www.hollischuang.com/archives/898</a></p><h2 id="2-数据库索引">2 数据库索引</h2><p>推荐: <a href="https://zhuanlan.zhihu.com/p/113917726">https://zhuanlan.zhihu.com/p/113917726</a><br>聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理</p><h2 id="3-Redis原理">3 Redis原理</h2><h3 id="Redis是什么？">Redis是什么？</h3><ol><li>是一个完全开源免费的key-value内存数据库</li><li>通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets</li></ol><h3 id="Redis数据库">Redis数据库</h3><blockquote><p>​通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p></blockquote><ul><li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li><li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li><li>自动操作：对不同数据类型的操作都是自动的，很安全</li><li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li><li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li></ul><h3 id="Redis缺点">Redis缺点</h3><ul><li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h2 id="4-乐观锁和悲观锁">4 乐观锁和悲观锁</h2><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p><p>乐观锁与悲观锁的具体区别: <a href="http://www.cnblogs.com/Bob-FD/p/3352216.html">http://www.cnblogs.com/Bob-FD/p/3352216.html</a></p><h2 id="5-MVCC">5 MVCC</h2><blockquote><p>​全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。</p></blockquote><h3 id="MySQL的innodb引擎是如何实现MVCC的"><a href="http://lib.csdn.net/base/mysql">MySQL</a>的innodb引擎是如何实现MVCC的</h3><p>innodb会为每一行添加两个字段，分别表示该行<strong>创建的版本</strong>和<strong>删除的版本</strong>，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（<a href="http://blog.csdn.net/chosen0ne/article/details/10036775">事务的隔离级别请看这篇文章</a>）下，具体各种数据库操作的实现：</p><ul><li>select：满足以下两个条件innodb会返回该行数据：<ul><li>该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。</li><li>该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。</li></ul></li><li>insert：将新插入的行的创建版本号设置为当前系统的版本号。</li><li>delete：将要删除的行的删除版本号设置为当前系统的版本号。</li><li>update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。</li></ul><p>其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。</p><p>​由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。</p><p>通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。</p><blockquote><p>参考：<a href="http://blog.csdn.net/chosen0ne/article/details/18093187">MVCC浅析</a></p></blockquote><h2 id="6-MyISAM和InnoDB">6 MyISAM和InnoDB</h2><p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p><p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><p>mysql 数据库引擎: <a href="http://www.cnblogs.com/0201zcr/p/5296843.html">http://www.cnblogs.com/0201zcr/p/5296843.html</a><br>MySQL存储引擎－－MyISAM与InnoDB区别: <a href="https://segmentfault.com/a/1190000008227211">https://segmentfault.com/a/1190000008227211</a></p><h1>网络</h1><h2 id="1-三次握手">1 三次握手</h2><ol><li>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。</li><li>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。</li><li>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。</li></ol><h2 id="2-四次挥手">2 四次挥手</h2><p><em>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</em></p><ol><li>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.</li><li>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.</li><li>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.</li><li>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</li></ol><p>图解: <a href="http://blog.csdn.net/whuslei/article/details/6667471">http://blog.csdn.net/whuslei/article/details/6667471</a></p><h2 id="3-ARP协议">3 ARP协议</h2><p>地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。</p><h2 id="4-urllib和urllib2的区别">4 urllib和urllib2的区别</h2><p>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.</p><ol><li>urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。</li><li>urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。</li></ol><h2 id="5-Post和Get">5 Post和Get</h2><p><a href="http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html">GET和POST有什么区别？及为什么网上的多数答案都是错的</a><br><a href="https://www.zhihu.com/question/31640769?rf=37401322">知乎回答</a></p><p>get: <a href="http://tools.ietf.org/html/rfc2616#section-9.3">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a><br>post: <a href="http://tools.ietf.org/html/rfc2616#section-9.5">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a></p><h2 id="6-Cookie和Session">6 Cookie和Session</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Cookie</th><th style="text-align:left">Session</th></tr></thead><tbody><tr><td style="text-align:left">储存位置</td><td style="text-align:left">客户端</td><td style="text-align:left">服务器端</td></tr><tr><td style="text-align:left">目的</td><td style="text-align:left">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td><td style="text-align:left">跟踪会话</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">不安全</td><td style="text-align:left">安全</td></tr></tbody></table><p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p><h2 id="7-apache和nginx的区别">7 apache和nginx的区别</h2><p>nginx 相对 apache 的优点：</p><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li><li>抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能</li><li>配置简洁</li><li>高度模块化的设计，编写模块相对简单</li><li>社区活跃</li></ul><p>apache 相对nginx 的优点：</p><ul><li>rewrite ，比nginx 的rewrite 强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug ，nginx 的bug 相对较多</li><li>超稳定</li></ul><h2 id="8-网站用户密码保存">8 网站用户密码保存</h2><ol><li>明文保存</li><li>明文hash后保存,如md5</li><li>MD5+Salt方式,这个salt可以随机</li><li>知乎使用了Bcrypy(好像)加密</li></ol><h2 id="9-HTTP和HTTPS">9 HTTP和HTTPS</h2><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">1xx 报告</td><td style="text-align:left">接收到请求，继续进程</td></tr><tr><td style="text-align:left">2xx 成功</td><td style="text-align:left">步骤成功接收，被理解，并被接受</td></tr><tr><td style="text-align:left">3xx 重定向</td><td style="text-align:left">为了完成请求,必须采取进一步措施</td></tr><tr><td style="text-align:left">4xx 客户端出错</td><td style="text-align:left">请求包括错的顺序或不能完成</td></tr><tr><td style="text-align:left">5xx 服务器出错</td><td style="text-align:left">服务器无法完成显然有效的请求</td></tr></tbody></table><p>403: Forbidden<br>404: Not Found</p><p>HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA</p><h2 id="10-XSRF和XSS">10 XSRF和XSS</h2><ul><li>CSRF(Cross-site request forgery)跨站请求伪造</li><li>XSS(Cross Site Scripting)跨站脚本攻击</li></ul><p>CSRF重点在请求,XSS重点在脚本</p><h2 id="11-幂等-Idempotence">11 幂等 Idempotence</h2><p>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的<strong>副作用</strong>。(注意是副作用)</p><p><code>GET http://www.bank.com/account/123456</code>，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。<code>GET http://www.news.com/latest-news</code>这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><p>DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：<code>DELETE http://www.forum.com/article/4231</code>，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：<code>POST http://www.forum.com/articles</code>的语义是在<code>http://www.forum.com/articles</code>下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。</p><p>PUT所对应的URI是要创建或更新的资源本身。比如：<code>PUT http://www.forum/articles/4231</code>的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</p><h2 id="12-RESTful架构-SOAP-RPC">12 RESTful架构(SOAP,RPC)</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p><h2 id="13-SOAP">13 SOAP</h2><p>SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。</p><h2 id="14-RPC">14 RPC</h2><p>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p><p>总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了.</p><p>进化的顺序: RPC -&gt; SOAP -&gt; RESTful</p><h2 id="15-CGI和WSGI">15 CGI和WSGI</h2><p>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。<br>CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。</p><p>WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。</p><p>官方说明：<a href="https://www.python.org/dev/peps/pep-3333/">PEP-3333</a></p><h2 id="16-中间人攻击">16 中间人攻击</h2><p>在GFW里屡见不鲜的,呵呵.</p><p>中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。</p><h2 id="17-c10k问题">17 c10k问题</h2><p>所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。<br>推荐: <a href="https://my.oschina.net/xianggao/blog/664275">https://my.oschina.net/xianggao/blog/664275</a></p><h2 id="18-socket">18 socket</h2><p>推荐: <a href="http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></p><p>Socket=Ip address+ TCP/UDP + port</p><h2 id="19-浏览器缓存">19 浏览器缓存</h2><p>推荐: <a href="http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html">http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html</a></p><p>304 Not Modified</p><h2 id="20-HTTP1-0和HTTP1-1">20 HTTP1.0和HTTP1.1</h2><p>推荐: <a href="http://blog.csdn.net/elifefly/article/details/3964766">http://blog.csdn.net/elifefly/article/details/3964766</a></p><ol><li>请求头Host字段,一个服务器多个网站</li><li>长链接</li><li>文件断点续传</li><li>身份认证,状态管理,Cache缓存</li></ol><p>HTTP请求8种方法介绍<br>HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。</p><p>GET</p><p>GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。</p><p>GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。</p><p>HEAD</p><p>HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。</p><p>POST</p><p>POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。</p><p>PUT</p><p>PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</p><p>DELETE</p><p>DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。</p><p>CONNECT</p><p>CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。</p><p>OPTIONS</p><p>OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许</p><p>TRACE</p><p>TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p><p>HTTP/1.1之后增加的方法</p><p>在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法：</p><p>PATCH</p><p>PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：</p><p>但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。<br>当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。</p><h2 id="21-Ajax">21 Ajax</h2><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。</p><h1>*NIX</h1><h2 id="unix进程间通信方式-IPC">unix进程间通信方式(IPC)</h2><ol><li>管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</li><li>命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</li><li>信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。</li><li>消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺</li><li>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</li><li>内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。</li><li>信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</li><li>套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</li></ol><h1>数据结构</h1><h2 id="1-红黑树">1 红黑树</h2><p>红黑树与AVL的比较：</p><p>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；</p><p>红黑是用非严格的平衡来换取增删节点时候旋转次数的降低；</p><p>所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。</p><p>红黑树详解: <a href="https://xieguanglei.github.io/blog/post/red-black-tree.html">https://xieguanglei.github.io/blog/post/red-black-tree.html</a></p><p>教你透彻了解红黑树: <a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a></p><h1>编程题</h1><h2 id="1-台阶问题-斐波那契">1 台阶问题/斐波那契</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt;= <span class="number">2</span> <span class="keyword">else</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种记忆方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">memo</span>(<span class="params">func</span>):</span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[args] = func(*args)</span><br><span class="line">        <span class="keyword">return</span> cache[args]</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@memo</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(i-<span class="number">1</span>) + fib(i-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第三种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="2-变态台阶问题">2 变态台阶问题</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> * fib(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="3-矩形覆盖">3 矩形覆盖</h2><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p><blockquote><p>第<code>2*n</code>个矩形的覆盖方法等于第<code>2*(n-1)</code>加上第<code>2*(n-2)</code>的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> n: <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="4-杨氏矩阵查找">4 杨氏矩阵查找</h2><p>在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>使用Step-wise线性搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">l, r, c</span>):</span><br><span class="line">    <span class="keyword">return</span> l[r][c]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">l, x</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(l) - <span class="number">1</span></span><br><span class="line">    n = <span class="built_in">len</span>(l[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    c = n</span><br><span class="line">    <span class="keyword">while</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt;= m:</span><br><span class="line">        value = get_value(l, r, c)</span><br><span class="line">        <span class="keyword">if</span> value == x:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> value &gt; x:</span><br><span class="line">            c = c - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> value &lt; x:</span><br><span class="line">            r = r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="5-去除列表中的重复元素">5 去除列表中的重复元素</h2><p>用集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">set</span>(l))</span><br></pre></td></tr></table></figure><p>用字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = &#123;&#125;.fromkeys(l1).keys()</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br></pre></td></tr></table></figure><p>用字典并保持顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = <span class="built_in">list</span>(<span class="built_in">set</span>(l1))</span><br><span class="line">l2.sort(key=l1.index)</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = []</span><br><span class="line">[l2.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> l2]</span><br></pre></td></tr></table></figure><p>sorted排序并且用列表推导式.</p><p>l = [‘b’,‘c’,‘d’,‘b’,‘c’,‘a’,‘a’]<br>[single.append(i) for i in sorted(l) if i not in single]<br>print single</p><h2 id="6-链表成对调换">6 链表成对调换</h2><p><code>1-&gt;2-&gt;3-&gt;4</code>转换成<code>2-&gt;1-&gt;4-&gt;3</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># @param a ListNode</span></span><br><span class="line">    <span class="comment"># @return a ListNode</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head</span>):</span><br><span class="line">        <span class="keyword">if</span> head != <span class="literal">None</span> <span class="keyword">and</span> head.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">next</span> = head.<span class="built_in">next</span></span><br><span class="line">            head.<span class="built_in">next</span> = self.swapPairs(<span class="built_in">next</span>.<span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h2 id="7-创建字典的方法">7 创建字典的方法</h2><h3 id="1-直接创建">1 直接创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;earth&#x27;</span>, <span class="string">&#x27;port&#x27;</span>:<span class="string">&#x27;80&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法">2 工厂方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items=[(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;earth&#x27;</span>),(<span class="string">&#x27;port&#x27;</span>,<span class="string">&#x27;80&#x27;</span>)]</span><br><span class="line">dict2=<span class="built_in">dict</span>(items)</span><br><span class="line">dict1=<span class="built_in">dict</span>(([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;earth&#x27;</span>],[<span class="string">&#x27;port&#x27;</span>,<span class="string">&#x27;80&#x27;</span>]))</span><br></pre></td></tr></table></figure><h3 id="3-fromkeys-方法">3 fromkeys()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#125;.fromkeys((<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>),-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;x&#x27;</span>:-<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:-<span class="number">1</span>&#125;</span><br><span class="line">dict2=&#123;&#125;.fromkeys((<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>))</span><br><span class="line">dict2=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="literal">None</span>, <span class="string">&#x27;y&#x27;</span>:<span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="8-合并两个有序列表">8 合并两个有序列表</h2><p>知乎远程面试要求编程</p><blockquote><p>尾递归</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_recursion_merge_sort2</span>(<span class="params">l1, l2, tmp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(l2) == <span class="number">0</span>:</span><br><span class="line">        tmp.extend(l1)</span><br><span class="line">        tmp.extend(l2)</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> l1[<span class="number">0</span>] &lt; l2[<span class="number">0</span>]:</span><br><span class="line">            tmp.append(l1[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l1[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(l2[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l2[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursion_merge_sort2</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, [])</span><br></pre></td></tr></table></figure><blockquote><p>循环算法</p></blockquote><p>思路：</p><p>定义一个新的空列表</p><p>比较两个列表的首个元素</p><p>小的就插入到新列表里</p><p>把已经插入新列表的元素从旧列表删除</p><p>直到两个旧列表有一个为空</p><p>再把旧列表加到新列表后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">loop_merge_sort</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(l1) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(l2) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> l1[<span class="number">0</span>] &lt; l2[<span class="number">0</span>]:</span><br><span class="line">            tmp.append(l1[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l1[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(l2[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l2[<span class="number">0</span>]</span><br><span class="line">    tmp.extend(l1)</span><br><span class="line">    tmp.extend(l2)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><blockquote><p>pop弹出</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sortedlist</span>(<span class="params">a,b</span>):</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">and</span> b:</span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">0</span>] &gt;= b[<span class="number">0</span>]:</span><br><span class="line">            c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="built_in">print</span> merge_sortedlist(a,b)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="9-交叉链表求交点">9 交叉链表求交点</h2><blockquote><p>其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示</p></blockquote><p><img src="http://hi.csdn.net/attachment/201106/28/0_1309244136MWLP.gif" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">min</span>(<span class="built_in">len</span>(a),<span class="built_in">len</span>(b))):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">1</span> <span class="keyword">and</span> (a[-<span class="number">1</span>] != b[-<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;No&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a[-i] != b[-i]:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;交叉节点：&quot;</span>,a[-i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>另外一种比较正规的方法，构造链表类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">node</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    length1, lenth2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.<span class="built_in">next</span>:</span><br><span class="line">        l1 = l1.<span class="built_in">next</span></span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.<span class="built_in">next</span>:</span><br><span class="line">        l2 = l2.<span class="built_in">next</span></span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 长的链表先走</span></span><br><span class="line">    <span class="keyword">if</span> length1 &gt; lenth2:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length1 - length2):</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length2 - length1):</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.<span class="built_in">next</span> == l2.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>修改了一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">node</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    length1, length2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.<span class="built_in">next</span>:</span><br><span class="line">        l1 = l1.<span class="built_in">next</span><span class="comment">#尾节点</span></span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.<span class="built_in">next</span>:</span><br><span class="line">        l2 = l2.<span class="built_in">next</span><span class="comment">#尾节点</span></span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果相交</span></span><br><span class="line">    <span class="keyword">if</span> l1.<span class="built_in">next</span> == l2.<span class="built_in">next</span>:</span><br><span class="line">        <span class="comment"># 长的链表先走</span></span><br><span class="line">        <span class="keyword">if</span> length1 &gt; length2:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length1 - length2):</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> l1<span class="comment">#返回交点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length2 - length1):</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> l2<span class="comment">#返回交点</span></span><br><span class="line">    <span class="comment"># 如果不相交</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>思路: <a href="http://humaoli.blog.163.com/blog/static/13346651820141125102125995/">http://humaoli.blog.163.com/blog/static/13346651820141125102125995/</a></p><h2 id="10-二分查找">10 二分查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params"><span class="built_in">list</span>, item</span>):</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (high - low) / <span class="number">2</span> + low    <span class="comment"># 避免(high + low) / 2溢出</span></span><br><span class="line">        guess = <span class="built_in">list</span>[mid]</span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(mylist, <span class="number">3</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考: <a href="http://blog.csdn.net/u013205877/article/details/76411718">http://blog.csdn.net/u013205877/article/details/76411718</a></p><h2 id="11-快排">11 快排</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quicksort</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">list</span>)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        midpivot = <span class="built_in">list</span>[<span class="number">0</span>]</span><br><span class="line">        lessbeforemidpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> i&lt;=midpivot]</span><br><span class="line">        biggerafterpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; midpivot]</span><br><span class="line">        finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot)</span><br><span class="line">        <span class="keyword">return</span> finallylist</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quicksort([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>更多排序问题可见：<a href="http://blog.csdn.net/mrlevo520/article/details/77829204">数据结构与算法-排序篇-Python描述</a></p></blockquote><h2 id="12-找零问题">12 找零问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#values是硬币的面值values = [ 25, 21, 10, 5, 1]</span></span><br><span class="line"><span class="comment">#valuesCounts   钱币对应的种类数</span></span><br><span class="line"><span class="comment">#money  找出来的总钱数</span></span><br><span class="line"><span class="comment">#coinsUsed   对应于目前钱币总数i所使用的硬币数目</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">values,valuesCounts,money,coinsUsed</span>):</span><br><span class="line">    <span class="comment">#遍历出从1到money所有的钱数可能</span></span><br><span class="line">    <span class="keyword">for</span> cents <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,money+<span class="number">1</span>):</span><br><span class="line">        minCoins = cents</span><br><span class="line">        <span class="comment">#把所有的硬币面值遍历出来和钱数做对比</span></span><br><span class="line">        <span class="keyword">for</span> kind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,valuesCounts):</span><br><span class="line">            <span class="keyword">if</span> (values[kind] &lt;= cents):</span><br><span class="line">                temp = coinsUsed[cents - values[kind]] +<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (temp &lt; minCoins):</span><br><span class="line">                    minCoins = temp</span><br><span class="line">        coinsUsed[cents] = minCoins</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;面值:&#123;0&#125;的最少硬币使用数为:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(cents, coinsUsed[cents]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/wdxin1322/article/details/9501163">http://blog.csdn.net/wdxin1322/article/details/9501163</a></p><p>方法: <a href="http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html">http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html</a></p><h2 id="13-广度遍历和深度遍历二叉树">13 广度遍历和深度遍历二叉树</h2><p>给定一个数组，构建二叉树，并且按层次打印这个二叉树</p><h2 id="14-二叉树节点">14 二叉树节点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line">tree = Node(<span class="number">1</span>, Node(<span class="number">3</span>, Node(<span class="number">7</span>, Node(<span class="number">0</span>)), Node(<span class="number">6</span>)), Node(<span class="number">2</span>, Node(<span class="number">5</span>), Node(<span class="number">4</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-层次遍历">15 层次遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">root</span>):</span><br><span class="line">    row = [root]</span><br><span class="line">    <span class="keyword">while</span> row:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line">        row = [kid <span class="keyword">for</span> item <span class="keyword">in</span> row <span class="keyword">for</span> kid <span class="keyword">in</span> (item.left, item.right) <span class="keyword">if</span> kid]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16-深度遍历">16 深度遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deep</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(root.data)</span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lookup(tree)</span><br><span class="line">    deep(tree)</span><br></pre></td></tr></table></figure><h2 id="17-前中后序遍历">17 前中后序遍历</h2><p>深度遍历改变顺序就OK了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#二叉树的遍历</span></span><br><span class="line"><span class="comment">#简单的二叉树节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,value,left,right</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment">#中序遍历:遍历左子树,访问当前节点,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mid_travelsal</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        mid_travelsal(root.left)</span><br><span class="line">    <span class="comment">#访问当前节点</span></span><br><span class="line">    <span class="built_in">print</span>(root.value)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        mid_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前序遍历:访问当前节点,遍历左子树,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pre_travelsal</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="built_in">print</span> (root.value)</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        pre_travelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        pre_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#后续遍历:遍历左子树,遍历右子树,访问当前节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_trvelsal</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        post_trvelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        post_trvelsal(root.right)</span><br><span class="line">    <span class="built_in">print</span>(root.value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18-求最大树深">18 求最大树深</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">root</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="19-求两棵树是否相同">19 求两棵树是否相同</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isSameTree</span>(<span class="params">p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">None</span> <span class="keyword">and</span> q == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> p <span class="keyword">and</span> q:</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> isSameTree(p.left,q.left) <span class="keyword">and</span> isSameTree(p.right,q.right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="20-前序中序求后序">20 前序中序求后序</h2><p>推荐: <a href="http://blog.csdn.net/hinyunsin/article/details/6315502">http://blog.csdn.net/hinyunsin/article/details/6315502</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rebuild</span>(<span class="params">pre, center</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    cur = Node(pre[<span class="number">0</span>])</span><br><span class="line">    index = center.index(pre[<span class="number">0</span>])</span><br><span class="line">    cur.left = rebuild(pre[<span class="number">1</span>:index + <span class="number">1</span>], center[:index])</span><br><span class="line">    cur.right = rebuild(pre[index + <span class="number">1</span>:], center[index + <span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deep</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line">    <span class="built_in">print</span>(root.data)</span><br></pre></td></tr></table></figure><h2 id="21-单链表逆置">21 单链表逆置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">link = Node(<span class="number">1</span>, Node(<span class="number">2</span>, Node(<span class="number">3</span>, Node(<span class="number">4</span>, Node(<span class="number">5</span>, Node(<span class="number">6</span>, Node(<span class="number">7</span>, Node(<span class="number">8</span>, Node(<span class="number">9</span>)))))))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">link</span>):</span><br><span class="line">    pre = link</span><br><span class="line">    cur = link.<span class="built_in">next</span></span><br><span class="line">    pre.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        tmp = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = tmp</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">root = rev(link)</span><br><span class="line"><span class="keyword">while</span> root:</span><br><span class="line">    <span class="built_in">print</span>(root.data)</span><br><span class="line">    root = root.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/feliciafay/article/details/6841115">http://blog.csdn.net/feliciafay/article/details/6841115</a></p><p>方法: <a href="http://www.xuebuyuan.com/2066385.html?mobile=1">http://www.xuebuyuan.com/2066385.html?mobile=1</a></p><h2 id="22-两个字符串是否是变位词">22 两个字符串是否是变位词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Anagram</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    @:param s1: The first string</span></span><br><span class="line"><span class="string">    @:param s2: The second string</span></span><br><span class="line"><span class="string">    @:return true or false</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Solution1</span>(<span class="params">s1,s2</span>):</span><br><span class="line">        alist = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">        pos1 = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos1 &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> stillOK:</span><br><span class="line">            pos2 = <span class="number">0</span></span><br><span class="line">            found = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> pos2 &lt; <span class="built_in">len</span>(alist) <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">                <span class="keyword">if</span> s1[pos1] == alist[pos2]:</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pos2 = pos2 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                alist[pos2] = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            pos1 = pos1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Solution1(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;dcba&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Solution2</span>(<span class="params">s1,s2</span>):</span><br><span class="line">        alist1 = <span class="built_in">list</span>(s1)</span><br><span class="line">        alist2 = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">        alist1.sort()</span><br><span class="line">        alist2.sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        matches = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> matches:</span><br><span class="line">            <span class="keyword">if</span> alist1[pos] == alist2[pos]:</span><br><span class="line">                pos = pos + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                matches = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matches</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Solution2(<span class="string">&#x27;abcde&#x27;</span>,<span class="string">&#x27;edcbg&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Solution3</span>(<span class="params">s1,s2</span>):</span><br><span class="line">        c1 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        c2 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">            pos = <span class="built_in">ord</span>(s1[i])-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            c1[pos] = c1[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">            pos = <span class="built_in">ord</span>(s2[i])-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            c2[pos] = c2[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="number">26</span> <span class="keyword">and</span> stillOK:</span><br><span class="line">            <span class="keyword">if</span> c1[j] == c2[j]:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Solution3(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;pleap&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="23-动态规划问题">23 动态规划问题</h2><blockquote><p>可参考：<a href="http://blog.csdn.net/mrlevo520/article/details/75676160">动态规划(DP)的整理-Python描述</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-22T01:31:10.541Z</published>
    <updated>2025-06-22T01:33:58.329Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python八股文2</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>Python设计模式</h1><p>代码直戳: <a href="https://github.com/faif/python-patterns">https://github.com/faif/python-patterns</a></p><h1>创建型模式</h1><h2 id="工厂方法">工厂方法</h2><p>实例 -&gt; 类 -&gt; 类工厂</p><h2 id="抽象工厂">抽象工厂</h2><p>简单来说就是把一些具有相同方法的类再进行封装,抽象共同的方法以供调用.是工厂方法的进阶版本.</p><p>实例 -&gt; 类 -&gt; 类工厂 -&gt; 抽象工厂</p><h2 id="惰性初始化-Lazy-evaluation">惰性初始化 Lazy evaluation</h2><p>这个Python里可以使用@property实现,就是当调用的时候才生成.</p><h2 id="生成器-Builder">生成器 Builder</h2><p><img src="img/builder.png" alt=""></p><p>Builder模式主要用于构建一个复杂的对象，但这个对象构建的算法是稳定的，对象中的各个部分经常变化。Builder模式主要在于应对复杂对象各个部分的频繁需求变动。但是难以应对算法的需求变动。这点一定要注意，如果用错了，会带来很多不必要的麻烦。</p><p>重点是将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><p>简单的说：子对象变化较频繁，对算法相对稳定。</p><h2 id="单例模式-Singleton">单例模式 Singleton</h2><p>一个类只有一个实例</p><h2 id="原型模式">原型模式</h2><p>特点是通过复制一个已经存在的实例来返回新的实例,而不是新建实例.</p><p>多用于创建复杂的或者耗时的实例,因为这种情况下,复制一个已经存在的实例使程序运行更高效;或者创建值相等,只是命名不一样的同类数据.</p><h2 id="对象池-Object-pool">对象池 Object pool</h2><p>一个对象池是一组已经初始化过且可以使用的对象，而可以不用在有需求时创建和销毁对象。池的用户可以从池子中取得对象，对其进行操作处理，并在不需要时归还给池子而非销毁 而不是销毁它.</p><p>在Python内部实现了对象池技术.例如像小整型这样的数据引用非常多,创建销毁都会消耗时间,所以保存在对象池里,减少开销.</p><h1>结构型模式</h1><h2 id="修饰模型-Decorator">修饰模型 Decorator</h2><p>Python里就是装饰器.</p><h2 id="代理模式-Proxy">代理模式 Proxy</h2><p>例如Python里的引用计数.</p><h1>行为型模式</h1><h2 id="迭代器">迭代器</h2><p>迭代容器里所有的元素.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.998Z</published>
    <updated>2025-06-21T13:11:32.386Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 自动化部署</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.996Z</published>
    <updated>2025-06-21T13:09:40.528Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 岗位需求</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>1.新意互动–python全栈实习生</h1><h2 id="岗位需求">岗位需求:</h2><p>1.熟悉agent搭建及后端开发，有相关项目经历</p><p>2.熟悉coze，dify，langchain中的一种或多种，有prompt工程经验</p><p>3.熟悉python，pytorch，使用过知识库，了解RAG的基本原理，熟悉一些经典的机器学习算法，有一定的前后端API开发经验</p><h1>2.理想汽车–后端开发实习生（python）</h1><h2 id="岗位职责">岗位职责:</h2><p>1.飞书生态开发:<br>（1)基于飞书开放平台SDK,参与应用后端API开发与维护<br>(2)设计并实现飞书机器人、消息推送等场景化功能模块<br>2.效率工具开发<br>（1）开发自动化工具，集成飞书API实现业务场景提效<br>(2)参与微服务架构设计，协助搭建高可用后端服务，优化接口性能<br>3.技术文档编写<br>(1)输出模块设计文档、接口文档及SDK使用指南</p><h2 id="任职要求">任职要求:</h2><h3 id="硬性要求">硬性要求</h3><p>1.熟练掌握Python语言，理解OOP、异步编程及常用设计模式<br>2.熟悉至少一个Web框架(Django/Flask/FastAPl)能独立开发RESTful API<br>3.了解HTTP/WebSocket办议，熟悉Postman/Swagger等调试工具<br>4.具备基础数据库知识，能熟练使用MySQL/Redis/MongoDB中的至少一种</p><h3 id="加分项">加分项</h3><p>1.有飞书开放平台开发经验，熟悉事件订阅/消息卡片等机制<br>2.掌握PyTorch/TensorFlow框架，有NLP领域深度学习实践经历</p><h1>3.智百源科技–Python</h1><h2 id="职位详情">职位详情</h2><p>Docker, Django, MySQL, Redis, Linux开发/部署经验, python, java, Flask</p><h3 id="岗位职责-2">岗位职责:</h3><p>1.维护并优化既有产品的Python后端代码;<br>2.完成新产品的后端搭建;<br>3.根据用户的需求，梳理和实现相应的业务逻辑</p><h3 id="岗位要求">岗位要求:</h3><p>1.本科、研究生及以上学历,计算机相关专业在校生;<br>2.每周能保证至少3天的实习时间，实习期6个月或以上;<br>3.熟练掌握常用的Python后端框架，如Django,Flask等，有相关的项目实践经验，能独立完成相应模块的开发及维护工作;<br>4.有良好的学习能力和沟通能力，积极主动，自驱力强;<br>注：python为主，Java为辅的实习岗位,可以接受再投递简历(实习时间不少于6个月)</p><h1>4.七牛云–AI服务后端研发实习生</h1><h2 id="工作职责">工作职责</h2><p>1、参与AIGC/LLM服务平台的工程架构设计和调研<br>2、参与业务系统的开发和测试;</p><h2 id="职位要求">职位要求</h2><p>1、熟练掌握计算机基础知识,包括但不限于操作系统、计算机网络等;<br>2、具备扎实的编程基础，熟练掌握Golang或Python中一门语言，熟悉主要应用框架;<br>3、熟悉Mysql、Redis、MQ等常用WEB组件并了解基本用法;<br>4、了解LLMAPI/Agent/RAG等架构原理者或发表相关论文者优先;<br>5、优秀的沟通和团队协作能力，具备较强的主动学习和创新能力</p><h1>5.Momenta–python后端开发实习生</h1><h2 id="岗位职责-3">岗位职责</h2><p>1、深度参与自动驾驶数据的数据仓库建设<br>2、参与设计并实现自动驾驶相关数据管理系统等核心内容<br>3、开发自动化平台工具<br>4、提高数据使用效率</p><h2 id="岗位要求-2">岗位要求:</h2><p>1、具备扎实的编程基础、优秀的代码设计能力和品味、热爱编程<br>2、语言以golang、python为主，可以接受java、C、c++或其他语言转golang/python<br>3、熟悉Linux基本常用命令,会编写简单的shel脚本<br>4、良好的计算机基础知识，熟悉I/O,cpu,内存，网络等知识，深刻理解计算机原理、有良好的数据结构和算法基础<br>5、熟悉Mysql、Postgresq1、redis、mongo、消息队列等组件</p><h1>步刻时光–python实习生</h1><h2 id="职位详情-2">职位详情</h2><p>python, MySQL, Redis, Flask</p><h2 id="任职要求-2">任职要求:</h2><p>1.熟练使用python,flask fastapi,celery等库<br>2.计算机相关专业，本科或者研究生在校生，实习<br>3.熟悉Linux操作系统，熟练使用Linux相关命令<br>4.有扎实的编程功底，具有良好代码编写习惯善于编写技术文档<br>5.具有良好的人际沟通能力，团队协作能力，思维敏捷<br>6.认真负责</p><h2 id="岗位职责-4">岗位职责:</h2><p>1.参与Flask API,ETL,Amazon接口开发<br>2.协同其他开发人员的工作<br>3.认真负责</p><h1>千渊科技–python开发实习生(大模型应用)</h1><h2 id="岗位职责-5">岗位职责</h2><p>1.负责公司大模型平台和Agent框架以及comfyui节点插件等多个模块的开发和升级工作<br>2.开发维护基于openai等大模型以及工作流如dify和comfyui等在不同行业垂直领域的AI应用。<br>3.能独立完成python项目的开发、调试、部署与上线。<br>4.进行技术调研、可行性分析，系统、流程结构设计、优化、重构。<br>5.重点:熟悉dify源码可以二次开发优先。</p><h2 id="主要技能">主要技能</h2><p>1.熟悉常见的Python Web技术栈,Flask,Diango,ZeroRPC等，能独立完成python项目开发<br>2.精通常见的数据库技术, MySQL,Redis,Rocketmq等，并具备实际的业务落地经验;<br>3.熟悉同步，异步，多线程、socket相关技术，有分布式系统的开发实践经验;<br>4.熟练使用软件设计模式。<br>5.愿意尝试新技术。<br>6.有prompt优化经验。</p><h1>蓝景教育咨询–AI/应用开发实习生</h1><h2 id="职位描述">职位描述</h2><p>1.负责搭建和优化多模态EMIBEDDING模型，用于RAG的向量化知识库的构建与管理，并与微信平台进行集成。<br>2.处理和向量化不同类型的数据，包括文字、图片等，确保RAG模型在不同输入下都能高效检索相关数据。<br>3.负责数据库的优化和维护，采用SQL、FAISS、Milvus等工具进行数据存储和高效检索<br>4.涉及RPA (如影刀）自动化开发，支持大模型的训练与部署，优化API接口调用。<br>5.精通FastGPT、Dify等应用框架，具备LLaMA-Factory、Swift等训练框架的使用经验<br>6.具备分布式训练的经验,熟悉Deepspeed等框架，能够对训练过程中涉及的各种参数进行调优.</p><h2 id="任职要求-3">任职要求:</h2><p>1.本科及以上学历，计算机科学、人工智能、数据科学等相关专业。<br>2.深入了解大模型的训练和部署，具备API接口调用及FastGPT、Dify等应用框架的RAG实战经<br>3.熟悉LLaMA-Factory、Swif等训练框架，最好有分布式训练经验(如Deepspeed)<br>4.精通各类训练数据集，如IDPO、RLHF、PPO等，并熟悉SFT训练方法。<br>5.熟悉多模态数据处理，能够高效地处理和向量化文本、图片数据。<br>6.具备一定的AI模型接入经验，尤其是如何将模型与微信平台(包括企业微信、个人微信、公众号、小程序)结合。<br>7.有较强的主观学习能力和好奇心，能够快速理解并解决技术难题。<br>8.具备较好的团队协作和沟通能力，能够与不同部门进行有效合作。</p><h2 id="技能需求">技能需求:</h2><p>-技术栈：FAISS、Milvus、SQL(MySQL/PostgreSQL等）、Python、RAG<br>-经验要求:向量化模型(如BERT、CLIP等)应用、数据库设计与优化,RAG搭建;大模型训练与部署、API接口调用。<br>-接入技术:微信API、微信小程序开发、企业微信开发<br>其他：良好的沟通能力，能与跨部门团队协作具备强烈的学习兴趣和解决问题的能力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.995Z</published>
    <updated>2025-06-22T01:33:24.630Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python八股文3</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>1.新意互动–python全栈实习生</h1><h2 id="岗位需求">岗位需求:</h2><p>1.熟悉agent搭建及后端开发，有相关项目经历</p><p>2.熟悉coze，dify，langchain中的一种或多种，有prompt工程经验</p><p>3.熟悉python，pytorch，使用过知识库，了解RAG的基本原理，熟悉一些经典的机器学习算法，有一定的前后端API开发经验</p><h1>2.理想汽车–后端开发实习生（python）</h1><h2 id="岗位职责">岗位职责:</h2><p>1.飞书生态开发:<br>（1)基于飞书开放平台SDK,参与应用后端API开发与维护<br>(2)设计并实现飞书机器人、消息推送等场景化功能模块<br>2.效率工具开发<br>（1）开发自动化工具，集成飞书API实现业务场景提效<br>(2)参与微服务架构设计，协助搭建高可用后端服务，优化接口性能<br>3.技术文档编写<br>(1)输出模块设计文档、接口文档及SDK使用指南</p><h2 id="任职要求">任职要求:</h2><h3 id="硬性要求">硬性要求</h3><p>1.熟练掌握Python语言，理解OOP、异步编程及常用设计模式<br>2.熟悉至少一个Web框架(Django/Flask/FastAPl)能独立开发RESTful API<br>3.了解HTTP/WebSocket办议，熟悉Postman/Swagger等调试工具<br>4.具备基础数据库知识，能熟练使用MySQL/Redis/MongoDB中的至少一种</p><ul><li></li></ul><p>1.有飞书开放平台开发经验，熟悉事件订阅/消息卡片等机制<br>2.掌握PyTorch/TensorFlow框架，有NLP领域深度学习实践经历</p><h1>3.智百源科技–Python</h1><h2 id="职位详情">职位详情</h2><p>Docker, Django, MySQL, Redis, Linux开发/部署经验, python, java, Flask</p><h3 id="岗位职责-2">岗位职责:</h3><p>1.维护并优化既有产品的Python后端代码;<br>2.完成新产品的后端搭建;<br>3.根据用户的需求，梳理和实现相应的业务逻辑</p><h3 id="岗位要求">岗位要求:</h3><p>1.本科、研究生及以上学历,计算机相关专业在校生;<br>2.每周能保证至少3天的实习时间，实习期6个月或以上;<br>3.熟练掌握常用的Python后端框架，如Django,Flask等，有相关的项目实践经验，能独立完成相应模块的开发及维护工作;<br>4.有良好的学习能力和沟通能力，积极主动，自驱力强;<br>注：python为主，Java为辅的实习岗位,可以接受再投递简历(实习时间不少于6个月)</p><h1>4.七牛云–AI服务后端研发实习生</h1><h2 id="工作职责">工作职责</h2><p>1、参与AIGC/LLM服务平台的工程架构设计和调研<br>2、参与业务系统的开发和测试;</p><h2 id="职位要求">职位要求</h2><p>1、熟练掌握计算机基础知识,包括但不限于操作系统、计算机网络等;<br>2、具备扎实的编程基础，熟练掌握Golang或Python中一门语言，熟悉主要应用框架;<br>3、熟悉Mysql、Redis、MQ等常用WEB组件并了解基本用法;<br>4、了解LLMAPI/Agent/RAG等架构原理者或发表相关论文者优先;<br>5、优秀的沟通和团队协作能力，具备较强的主动学习和创新能力</p><h1>5.Momenta–python后端开发实习生</h1><h2 id="岗位职责-3">岗位职责</h2><p>1、深度参与自动驾驶数据的数据仓库建设<br>2、参与设计并实现自动驾驶相关数据管理系统等核心内容<br>3、开发自动化平台工具<br>4、提高数据使用效率</p><h2 id="岗位要求-2">岗位要求:</h2><p>1、具备扎实的编程基础、优秀的代码设计能力和品味、热爱编程<br>2、语言以golang、python为主，可以接受java、C、c++或其他语言转golang/python<br>3、熟悉Linux基本常用命令,会编写简单的shel脚本<br>4、良好的计算机基础知识，熟悉I/O,cpu,内存，网络等知识，深刻理解计算机原理、有良好的数据结构和算法基础<br>5、熟悉Mysql、Postgresq1、redis、mongo、消息队列等组件</p><h1>步刻时光–python实习生</h1><h2 id="职位详情-2">职位详情</h2><p>python, MySQL, Redis, Flask</p><h2 id="任职要求-2">任职要求:</h2><p>1.熟练使用python,flask fastapi,celery等库<br>2.计算机相关专业，本科或者研究生在校生，实习<br>3.熟悉Linux操作系统，熟练使用Linux相关命令<br>4.有扎实的编程功底，具有良好代码编写习惯善于编写技术文档<br>5.具有良好的人际沟通能力，团队协作能力，思维敏捷<br>6.认真负责</p><h2 id="岗位职责-4">岗位职责:</h2><p>1.参与Flask API,ETL,Amazon接口开发<br>2.协同其他开发人员的工作<br>3.认真负责</p><h1>千渊科技–python开发实习生(大模型应用)</h1><h2 id="岗位职责-5">岗位职责</h2><p>1.负责公司大模型平台和Agent框架以及comfyui节点插件等多个模块的开发和升级工作<br>2.开发维护基于openai等大模型以及工作流如dify和comfyui等在不同行业垂直领域的AI应用。<br>3.能独立完成python项目的开发、调试、部署与上线。<br>4.进行技术调研、可行性分析，系统、流程结构设计、优化、重构。<br>5.重点:熟悉dify源码可以二次开发优先。</p><h2 id="主要技能">主要技能</h2><p>1.熟悉常见的Python Web技术栈,Flask,Diango,ZeroRPC等，能独立完成python项目开发<br>2.精通常见的数据库技术, MySQL,Redis,Rocketmq等，并具备实际的业务落地经验;<br>3.熟悉同步，异步，多线程、socket相关技术，有分布式系统的开发实践经验;<br>4.熟练使用软件设计模式。<br>5.愿意尝试新技术。<br>6.有prompt优化经验。</p><h1>蓝景教育咨询–AI/应用开发实习生</h1><h2 id="职位描述">职位描述</h2><p>1.负责搭建和优化多模态EMIBEDDING模型，用于RAG的向量化知识库的构建与管理，并与微信平台进行集成。<br>2.处理和向量化不同类型的数据，包括文字、图片等，确保RAG模型在不同输入下都能高效检索相关数据。<br>3.负责数据库的优化和维护，采用SQL、FAISS、Milvus等工具进行数据存储和高效检索<br>4.涉及RPA (如影刀）自动化开发，支持大模型的训练与部署，优化API接口调用。<br>5.精通FastGPT、Dify等应用框架，具备LLaMA-Factory、Swift等训练框架的使用经验<br>6.具备分布式训练的经验,熟悉Deepspeed等框架，能够对训练过程中涉及的各种参数进行调优.</p><h2 id="任职要求-3">任职要求:</h2><p>1.本科及以上学历，计算机科学、人工智能、数据科学等相关专业。<br>2.深入了解大模型的训练和部署，具备API接口调用及FastGPT、Dify等应用框架的RAG实战经<br>3.熟悉LLaMA-Factory、Swif等训练框架，最好有分布式训练经验(如Deepspeed)<br>4.精通各类训练数据集，如IDPO、RLHF、PPO等，并熟悉SFT训练方法。<br>5.熟悉多模态数据处理，能够高效地处理和向量化文本、图片数据。<br>6.具备一定的AI模型接入经验，尤其是如何将模型与微信平台(包括企业微信、个人微信、公众号、小程序)结合。<br>7.有较强的主观学习能力和好奇心，能够快速理解并解决技术难题。<br>8.具备较好的团队协作和沟通能力，能够与不同部门进行有效合作。</p><h2 id="技能需求">技能需求:</h2><p>-技术栈：FAISS、Milvus、SQL(MySQL/PostgreSQL等）、Python、RAG<br>-经验要求:向量化模型(如BERT、CLIP等)应用、数据库设计与优化,RAG搭建;大模型训练与部署、API接口调用。<br>-接入技术:微信API、微信小程序开发、企业微信开发<br>其他：良好的沟通能力，能与跨部门团队协作具备强烈的学习兴趣和解决问题的能力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.992Z</published>
    <updated>2025-06-21T13:12:16.225Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发6Django</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>增删改查</h1><ul><li>models层</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################添加数据###############</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">from</span> project02.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> project02.models <span class="keyword">import</span> PeopleInfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book = BookInfo(</span><br><span class="line">    name=<span class="string">&#x27;Django&#x27;</span>,</span><br><span class="line">    pub_date=<span class="string">&#x27;2000-1-1&#x27;</span>,</span><br><span class="line">    readcount=<span class="number">10</span>,</span><br><span class="line">)</span><br><span class="line">book.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="comment"># objects相当于一个代理</span></span><br><span class="line">BookInfo.objects.create(</span><br><span class="line">    name=<span class="string">&#x27;测试开发入门&#x27;</span>,</span><br><span class="line">    pub_date=<span class="string">&#x27;2000-1-1&#x27;</span>,</span><br><span class="line">    readcount=<span class="number">200</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################修改数据#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"></span><br><span class="line">book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">9</span>)</span><br><span class="line">book.name = <span class="string">&#x27;运维开发入门&#x27;</span></span><br><span class="line">book.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="comment"># filter过滤</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">9</span>).update(name=<span class="string">&#x27;爬虫入门&#x27;</span>, commentcount=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###################删除数据#####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"></span><br><span class="line">book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 物理删除（直接删除），逻辑删除（is_delete）</span></span><br><span class="line">book.delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"></span><br><span class="line">BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">9</span>).delete()</span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">9</span>).delete()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################查询数据################</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    book=BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">9</span>)</span><br><span class="line"><span class="keyword">except</span> BookInfo.DoesNotExist:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询结果不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># all查询多个结果</span></span><br><span class="line">BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># count查询结果数量(下面两个结果一样的)</span></span><br><span class="line">BookInfo.objects.<span class="built_in">all</span>().count()</span><br><span class="line">BookInfo.objects.count()</span><br><span class="line"></span><br><span class="line"><span class="comment">################过滤查询#################################</span></span><br><span class="line"><span class="comment"># （属性__运算符=值）  注意：两个下划线</span></span><br><span class="line"><span class="comment"># filter 过滤  得到列表，多个值</span></span><br><span class="line"><span class="comment"># exclude 排除</span></span><br><span class="line"><span class="comment"># get 过滤单一结果  单个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询编号为1的图书</span></span><br><span class="line">BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">BookInfo.objects.get(id__exact=<span class="number">1</span>)</span><br><span class="line">BookInfo.objects.get(pk=<span class="number">1</span>) <span class="comment">#  pk主键</span></span><br><span class="line"><span class="comment"># 查询书名包含&#x27;湖&#x27;的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;湖&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询书名以&#x27;部&#x27;结尾的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(name__endswith=<span class="string">&#x27;部&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询书名为空的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(name__isnull=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 查询编号为1或3或5的图书</span></span><br><span class="line">BookInfo.objects.get(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 查询编号大于3的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于 gt  大于等于 gte</span></span><br><span class="line"><span class="comment"># 小于 lt  小于等于 lte</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 查询编号不等于3的图书</span></span><br><span class="line">BookInfo.objects.exclude(id__exact=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 查询1980年发表的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(pub_date__year=<span class="string">&#x27;1980&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询1999年1月1日后发表的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(pub_date__gt=<span class="string">&#x27;1999-1-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################比较###################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询阅读量大于评论量的图书</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(readcount__gt=F(<span class="string">&#x27;commentcount&#x27;</span>))</span><br><span class="line"><span class="comment"># 大于两倍</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(readcount__gt=F(<span class="string">&#x27;commentcount&#x27;</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且查询</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(readcount__gt=<span class="number">20</span>).<span class="built_in">filter</span>(id__lt=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q函数实现或者</span></span><br><span class="line"><span class="comment"># Q(属性__运算符=值)</span></span><br><span class="line"><span class="comment"># 可以用逻辑与&amp;、逻辑或|，连接</span></span><br><span class="line"><span class="comment"># 逻辑非~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################聚合函数##############################</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum, Max, Min, Avg, Count</span><br><span class="line"><span class="comment">#  求和</span></span><br><span class="line">BookInfo.objects.aggregate(Sum(<span class="string">&#x27;readcount&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">BookInfo.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;readcount&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##############跨表查询################</span></span><br><span class="line"><span class="comment"># 一对多</span></span><br><span class="line"><span class="comment"># 查询借到过书籍id为1的所有人的信息(先查找书籍，再找人)</span></span><br><span class="line">book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">book.peopleinfo_set.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询人物为1的书籍（先查询人物，再找书）</span></span><br><span class="line">person = PeopleInfo.objects.get(<span class="built_in">id</span>=<span class="number">9</span>)</span><br><span class="line">person.book.name</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>查询集QuerySet的两大特性：惰性查询，缓存，限制查询集，分页</p><p>创建查询数据集不会访问数据库，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = BookInfo.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>继续遍历查询数据集，才会访问数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book.name)</span><br></pre></td></tr></table></figure><ul><li><p>限制查询集</p><p>对查询完的数据进行切片 [0:2]  前闭后开</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.991Z</published>
    <updated>2025-06-21T13:12:32.382Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发5Django</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>ORM(对象关系映射)</h1><h3 id="1-定义模型类">1.定义模型类</h3><ul><li>在models文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str方法以让admin显示书籍名称</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeopleInfo</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    gender = models.BooleanField()</span><br><span class="line">    <span class="comment"># 外键约束：人物属于哪本书</span></span><br><span class="line">    book = models.ForeignKey(BookInfo, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><h3 id="2-模型迁移-建表">2.模型迁移(建表)</h3><ul><li><p>生成迁移文件</p><blockquote><p>python <a href="http://manage.py">manage.py</a> makemigrations</p></blockquote></li><li><p>执行迁移</p><blockquote><p>python <a href="http://manage.py">manage.py</a> migrate</p></blockquote></li></ul><h3 id="3-连接数据库">3.连接数据库</h3><ul><li>连接sqlite3数据库,并下载连接插件</li></ul><p><img src="D:/pro/Pictures/PixPin_2025-04-14_17-01-11.jpg" alt="PixPin_2025-04-14_17-01-11"></p><h1>站点管理</h1><ul><li><p>创建超级管理员</p><blockquote><p>python <a href="http://manage.py">manage.py</a> createsuperuser</p><p>python <a href="http://manage.py">manage.py</a> changepassword 用户名 # 重置密码</p></blockquote></li><li><p>登录站点：<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p></li></ul><h1>注册模型类</h1><ul><li>在子应用的admin文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> project.models <span class="keyword">import</span> BookInfo, PeopleInfo</span><br><span class="line"><span class="comment"># 注册模型</span></span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(PeopleInfo)</span><br><span class="line"><span class="comment"># 重新运行</span></span><br></pre></td></tr></table></figure><h3 id="添加测试用例">添加测试用例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> bookinfo(name,pub_date,readcount,commentcount,is_delete) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;射雕英雄传&#x27;</span>,<span class="string">&#x27;1980-5-1&#x27;</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">0</span>),(<span class="string">&#x27;天龙八部&#x27;</span>,<span class="string">&#x27;1986-7-24&#x27;</span>,<span class="number">36</span>,<span class="number">40</span>,<span class="number">0</span>),(<span class="string">&#x27;笑傲江湖&#x27;</span>,<span class="string">&#x27;1995-12-24&#x27;</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">0</span>),(<span class="string">&#x27;雪山飞狐&#x27;</span>,<span class="string">&#x27;1987-11-11&#x27;</span>,<span class="number">58</span>,<span class="number">24</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> peopleinfo(name,gender,book_id,description,is_delete) <span class="keyword">values</span> </span><br><span class="line">(<span class="string">&#x27;郭靖&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;降龙十八掌&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;黄蓉&#x27;</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;打狗棍法&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;黄药师&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;弹指神通&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;欧阳锋&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;蛤功&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;梅超风&#x27;</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;九阴白骨爪&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;乔峰&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;降龙十八掌&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;段誉&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;六脉神剑&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;虚竹&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;天山六阳掌&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;王语嫣&#x27;</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;神仙姐姐&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;令狐冲&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;独孤九剑&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;任盈盈&#x27;</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="string">&#x27;弹琴&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;岳不群&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;华山剑法&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;东方不败&#x27;</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="string">&#x27;葵花宝典&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;胡斐&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="string">&#x27;胡家刀法&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;苗若兰&#x27;</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;黄衣&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;程灵素&#x27;</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;医术&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">&#x27;袁衣&#x27;</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;六合拳&#x27;</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="shell工具">shell工具</h2><ul><li>所见即所得，在shell里测试代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.989Z</published>
    <updated>2025-06-21T13:12:43.700Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发4Django</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>Django框架</h1><ul><li>Web应用处理流程</li></ul><p><img src="D:/pro/Pictures/PixPin_2025-04-11_15-01-41.jpg" alt="PixPin_2025-04-11_15-01-41"></p><ul><li><p>发音：zhang gou（张狗）</p></li><li><p>遵循MVC模式，model-view-controller</p></li></ul><p><img src="D:/pro/Pictures/PixPin_2025-04-11_15-11-29.jpg" alt="PixPin_2025-04-11_15-11-29"></p><ul><li><p>model:对数据库进行访问，对数据库的数据增删改查；</p></li><li><p>view:封装结果，以html页面形式展示；</p></li><li><p>controller：接受请求，处理业务逻辑，与model和view交互，返回结果</p></li><li><p><strong>Django是MVT模式，T是Template，和controller一样</strong></p></li></ul><h2 id="创建虚拟环境">创建虚拟环境</h2><blockquote><h3 id="Linux">Linux</h3><p>mkvirtualenv -p python3 虚拟环境名   # 若不加python3，默认python2</p><p>rmvirtualenv 虚拟环境名  # 移除环境</p><p>deactivate # 退出当前环境</p><p>workon # 罗列环境</p><p>workon 虚拟环境名 # 切换环境</p><h3 id="conda">conda</h3><p>conda create -n 虚拟环境名 python=3.8</p><p>conda activate your_env_name</p><h3 id="cmd">cmd</h3><p>e:  # 切换到e盘</p><p>cd 文件夹   # cd Work\Code\python_code</p><h3 id="Django环境">Django环境</h3><p>conda install Django==3.2</p></blockquote><h2 id="创建项目">创建项目</h2><ul><li><p>创建工程</p><blockquote><p>django-admin startproject 工程名称</p></blockquote></li><li><p>创建子应用</p><blockquote><p>cd 工程名称</p><p>python <a href="http://manage.py">manage.py</a> startapp 子应用名称</p></blockquote></li></ul><h2 id="目录">目录</h2><p><img src="D:/pro/Pictures/PixPin_2025-04-11_16-30-10.jpg" alt="PixPin_2025-04-11_16-30-10"></p><h3 id="子应用注册项目">子应用注册项目</h3><ul><li>工程配置目录下，setttings.py中，INSTALLED_APPS中加入命令</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;子应用名称&#x27;</span>, <span class="comment"># 方案一,</span></span><br><span class="line">‘子应用名称.apps.子应用名称Config<span class="string">&#x27;,  # 方案二</span></span><br></pre></td></tr></table></figure><h3 id="启动项目">启动项目</h3><blockquote><p>python <a href="http://manage.py">manage.py</a> runserver</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.988Z</published>
    <updated>2025-06-21T13:12:52.592Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发3Git</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>Git</h1><ul><li>源代码管理软件</li><li>版本控制</li></ul><p><img src="D:/pro/Pictures/PixPin_2025-04-10_16-17-57.jpg" alt="PixPin_2025-04-10_16-17-57"></p><ul><li><p>创建目录和文件</p><blockquote><p>mkdir 文件夹名</p><p>touch 文件名</p></blockquote></li><li><p>git命令</p><blockquote><p>git init 初始化</p><p>git config <a href="http://user.name">user.name</a> 名字  告知仓库谁管理</p><p>git config user.email 邮箱</p><p>git add 文件夹或文件 提交的暂存区 / git add .</p><p>git commit -m “备注”   提交到仓库区</p><p>git push</p><p>git reset --hard HEAD^ 回退一个版本,一个^代表一个版本</p><p>git reflog 版本记录</p><p>git reset --hard 版本号 回退到某个版本</p><p>git reset HEAD <a href="http://login.py">login.py</a> 由暂存区恢复到工作区</p></blockquote></li></ul><h1>实例</h1><ul><li>复制仓库地址</li></ul><p><img src="D:/pro/Pictures/PixPin_2025-04-14_09-32-02.jpg" alt="PixPin_2025-04-14_09-32-02"></p><ul><li><p>空文件夹内，右键选择git bash here</p></li><li><p>克隆远程仓库</p><blockquote><p>git clone <a href="https://github.com/alan-pro/python_code.git">https://github.com/alan-pro/python_code.git</a></p></blockquote></li></ul><h1>问题</h1><blockquote><p>$ git add .<br>warning: in the working copy of ‘.idea/inspectionProfiles/Project_Default.xml’, LF will be replaced by CRLF the next time Git touches it<br>warning: in the working copy of ‘.idea/inspectionProfiles/profiles_settings.xml’, LF will be replaced by CRLF the next time Git touches it<br>warning: in the working copy of ‘cv2_size/Pipfile’, LF will be replaced by CRLF the next time Git touches it<br>warning: in the working copy of ‘cv2_size/dist/size_gui/_internal/numpy.libs/.load-order-numpy-2.0.2’, LF will be replaced by CRLF the next time Git touches it<br>warning: in the working copy of ‘cv2_size/dist/size_gui/_internal/scipy.libs/.load-order-scipy-1.13.1’, LF will be replaced by CRLF the next time Git touches it<br>warning: in the working copy of ‘cv2_size/ui/size_gui.ui’, LF will be replaced by CRLF the next time Git touches it</p></blockquote><ul><li><p>原因</p><p>**LF（Line Feed）<strong>和</strong>CRLF（Carriage Return + Line Feed）**是两种不同的行结束符表示方式。</p><ul><li><strong>LF</strong> 是 Unix/Linux 和 macOS 系统中常用的行结束符。</li><li><strong>CRLF</strong> 是 Windows 系统中常用的行结束符。</li></ul></li><li><p>解决方法</p><blockquote><p>git config core.autocrlf true #配置仅在当前仓库</p><p>git config --global core.autocrlf true  #适应于所有仓库</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.986Z</published>
    <updated>2025-06-21T13:12:59.971Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发2Redis</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>Redis</h1><p>Redis是一个服务端-客户端模式</p><h2 id="服务端">服务端</h2><ul><li><p>服务端命令为redis-server</p></li><li><p>help命令查看帮助文档</p><blockquote><p>redis-server --help</p></blockquote></li><li><p>其它命令</p><blockquote><p>ps aux | grep redis 查看redis服务器进程</p><p>sudo kill -9 pid 杀死redis服务器</p><p>sudo redis-server /etc/redis/redis.conf指定加载的配置文件</p></blockquote></li></ul><h2 id="客户端">客户端</h2><ul><li><p>命令为redis-cli</p></li><li><p>redis-cli --help</p></li><li><p>连接redis</p><blockquote><p>redis-cli</p></blockquote></li></ul><h2 id="数据结构">数据结构</h2><p><img src="D:/pro/Pictures/PixPin_2025-04-09_20-48-28.jpg" alt="PixPin_2025-04-09_20-48-28"></p><ul><li><p>设置与查看kv值</p><blockquote><p>set key值 value值  设置kv值</p><p>get key值   查看kv值</p><p>select 15   切换0到15数据库</p></blockquote></li><li><p>设置过期</p><blockquote><p>setex key值 seconds秒 value  例如验证码过期</p><p>ttl key值   查看过期时间</p><p>expire key seconds秒  设置过期</p></blockquote></li><li><p>其它</p><blockquote><p>key * 查看所有key值</p><p>mset key value key value 设置多个kv值</p><p>exists key 查看是否存在</p><p>type key 查看类型</p><p>del key key key 删除</p></blockquote></li></ul><h3 id="哈希设置">哈希设置</h3><ul><li><p>添加和获取</p><blockquote><p>hset 哈希表名 k v</p><p>hget 哈希表名 k</p></blockquote></li><li><p>查看</p><blockquote><p>hkeys 表名  查看所有k</p><p>hvals 表名 查看所有v</p></blockquote></li></ul><h3 id="列表设置">列表设置</h3><ul><li><p>添加和获取</p><blockquote><p>lpush key value value  添加，l指的是左面插入，r是右面插入</p><p>lrange key index  index  查看第几个到第几个的值，有序</p></blockquote></li><li><p>删除</p><blockquote><p>lrem key count value</p><p>若count=0，删除所有value；若count&gt;0，从左往右删除count个value；若&lt;0，反之。</p></blockquote></li></ul><h3 id="集合">集合</h3><ul><li><p>添加和查看</p><blockquote><p>sadd key member member 设置key和成员</p><p>smembers key 查看成员，成员重复只显示一个，且无序</p></blockquote></li><li><p>删除</p><blockquote><p>srem key member</p></blockquote></li></ul><h3 id="有序集合">有序集合</h3><ul><li><p>添加和查看</p><blockquote><p>zadd key score1 member1 score2 member2</p><p>zrange key start stop 第几个到第几个</p></blockquote></li><li><p>删除指定元素</p><blockquote><p>zrem key member1 member2</p></blockquote></li></ul><h1>Redis安装</h1><blockquote><p>pip install redis</p></blockquote><ul><li><p>调用redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">form redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="comment"># 创建redis-cli类实例</span></span><br><span class="line">redis_cli=Redis(host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            port= <span class="number">6379</span>,</span><br><span class="line">            db=<span class="number">0</span>)</span><br><span class="line">redis_cli.<span class="built_in">set</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>)</span><br><span class="line">name=redis_cli.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment"># value</span></span><br><span class="line">redis_cli.delete(<span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>文档：<a href="http://django-redis-chs.readthedocs.io/zh">django-redis-chs.readthedocs.io/zh</a> CN/latest/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.980Z</published>
    <updated>2025-06-21T13:13:08.584Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: python开发1Redis</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h1>1.Redis</h1><p><strong>Redis是一个高性能的Key-Value数据库</strong></p><ul><li>C语言编写的</li><li>实习缓存、队列系统的不同角色</li><li>中文网站（<a href="http://redis.cn">redis.cn</a>）</li></ul><h2 id="Redis特性（同其它可以-value缓存产品）">Redis特性（同其它可以-value缓存产品）</h2><ul><li>支持数据的持久化，即将内存的数据保存在磁盘上，重启时可再次加载</li><li>Redis不仅仅支持简单的kv类型的数据，还可提供list、set、zset、hash等数据结构的存储</li><li>支持数据备份，即master-slave模式的数据备份</li></ul><h2 id="Redis优势">Redis优势</h2><ul><li>性能极高</li><li>丰富的数据类型----支持二进制的Strings（字符串），Lists（列表），Hashes（哈希表），Sets（集合）及Ordered Sets（有序集合）数据类型操作</li><li>所有操作都是原子性的</li><li>丰富的特性—支持publish/subscribe（发布/订阅），通知，key过期等特性</li></ul><h2 id="Redis应用场景">Redis应用场景</h2><ul><li>用作缓存---------所有数据放在内存中（内存数据库）</li><li>特定场景替代传统数据库----比如社交类的应用</li><li>实现特定功能----session共享，购物车</li></ul><h2 id="Redis配置">Redis配置</h2><ul><li><p>查看配置信息：</p><blockquote><p>sudo vi 目录</p></blockquote></li><li><p>绑定ip</p><blockquote><p>bind 127.0.0.1 或真实ip</p></blockquote></li><li><p>端口，默认6379</p><blockquote><p>port 6379</p></blockquote></li><li><p>是否以守护进程运行（后台进程），推荐yes</p><blockquote><p>daemonize yes</p></blockquote></li><li><p>数据文件</p><blockquote><p>dbfilename dump.rdb</p></blockquote></li><li><p>数据文件存储路径</p><blockquote><p>dir /var/lib/redis</p></blockquote></li><li><p>日志文件</p><blockquote><p>logfile “/var/log/redis/redis-server.log”</p></blockquote></li><li><p>数据库默认16个</p><blockquote><p>database 16</p></blockquote></li><li><p>主从复制（双机备份）</p><blockquote><p>slaveof</p></blockquote></li></ul><h1>2.NoSQL</h1><ul><li>非关系型数据库（not only sql）</li><li>不支持sql语法</li><li>nosql存储数据都是kv形式</li><li>nosql数据库语言不通用</li><li>包括：Redis、Mongodb（<strong>蒙戈DB</strong>。“芒果DB”）存文档、Hbase hadoop（<strong>HBase哈杜普</strong>）处理海量数据、Cassandra hadoop（<strong>卡桑德拉 哈杜普</strong>）</li></ul><h2 id="NoSQL与SQL数据库区别：">NoSQL与SQL数据库区别：</h2><ul><li>sql数据库适用于关系特别复杂的数据查询场景，nosql反之；</li><li>sql对事务（要么一起成功，要么一起失败）的支持非常完善，nosql基本不支持事务</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-06-19T08:31:50.978Z</published>
    <updated>2025-06-21T13:21:22.594Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: Agent开发（智能体）</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 计算机基础</span><br><span class="line">categories:</span><br><span class="line">  - 计算机基础</span><br><span class="line">date: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br><span class="line">updated: 2025<span class="string">-03</span><span class="string">-25</span> 20:01:16</span><br></pre></td></tr></table></figure><h2 id="基础知识">基础知识</h2><ul><li>Ollama（欧拉玛）：主要用于消费者，个人开发者</li><li>VLLM：企业在用，大规模在线推理服务，高并发处理，模型支持主流的Hugging Face模型，使用python包、openAI兼容API、Docker</li></ul><p>开发软件：</p><p>小用户：Dify（底飞）</p><p>大用户：LangChain(兰彻因)</p><p>面向开发者，要求灵活性，高并发性，分布式，性能，可定制化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wenblog.org.edu.kg/posts/0.html"/>
    <id>https://wenblog.org.edu.kg/posts/0.html</id>
    <published>2025-05-06T02:17:18.268Z</published>
    <updated>2025-06-20T01:39:24.335Z</updated>
    
    <content type="html"><![CDATA[<h1>问题</h1><blockquote><p>{<br>“ClassificationSystem” : [<br>{<br>“CName” : “背景值”,<br>“Code” : “0”,<br>“Color” : “0,0,0”,<br>“EName” : “nodata”<br>},<br>{<br>“CName” : “旱地”,<br>“Code” : “12”,<br>“Color” : “255,215,0”,<br>“EName” : “dry farm”<br>}<br>]<br>}<br>{<br>“ClassificationSystem” : [<br>{<br>“CName” : “背景值”,<br>“Code” : “0”,<br>“Color” : “0,0,0”,<br>“EName” : “nodata”<br>},<br>{<br>“CName” : “旱地”,<br>“Code” : “12”,<br>“Color” : “255,215,0”,<br>“EName” : “dry farm”<br>}<br>]<br>}<br>里面有两个相同的&quot;ClassificationSystem&quot;,只要一个</p></blockquote><h3 id="使用-json-JSONDecoder-手动解析"><strong>使用 <code>json.JSONDecoder</code> 手动解析</strong></h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="title">with</span> open(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=&#x27;utf-<span class="number">8</span>&#x27;) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    decoder = json.<span class="type">JSONDecoder</span>()</span><br><span class="line">    # 只解析第一个 <span class="type">JSON</span> 对象</span><br><span class="line">    <span class="class"><span class="keyword">data</span>, idx = decoder.raw_decode(<span class="title">content</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;br&gt;
“ClassificationSystem” : [&lt;br&gt;
{&lt;br&gt;
“CName” : “背景值”,&lt;br&gt;
“Code” : “0”,&lt;br&gt;
“Color” : “0,0,0”,&lt;br&gt;
“EName”</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python开发7Django</title>
    <link href="https://wenblog.org.edu.kg/posts/bde0d894.html"/>
    <id>https://wenblog.org.edu.kg/posts/bde0d894.html</id>
    <published>2025-03-25T12:01:16.000Z</published>
    <updated>2025-03-25T12:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Session</h1><ul><li>Django项目默认启动Session。可以保存在数据库或内存，也可以混合存储</li><li>将session放入redis，放入内存</li></ul><h1>面向对象</h1><ul><li><p>三大特性</p><p>封装：把属性和方法捆绑在一起，对外隐藏实现细节（类（Class）方法来封装属性和方法）</p><p>继承：允许一个子类获取父类的属性和方法，同时可以扩展和修改它们（子类重写方法，多继承（class view(a, b)））</p><p>多态：同一操作作用于不同的类的实例，会有不同的执行结果（使用相同方法调用不同类的实例，结果不同）</p></li></ul><h1>路由匹配类视图逻辑</h1><p>客户端发出请求，到服务器的总路由，再分配到子路由上，get（）和post（）方法发出响应到客户端</p><h1>多继承</h1><ul><li><p>一个类可以同时继承多个父类，遵循MEO（方法解析顺序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可用(类名.___mro__) 或 类名.mro()</span><br></pre></td></tr></table></figure></li><li><p>MRO顺序</p><p><img src="C:/Users/pro/AppData/Roaming/Typora/typora-user-images/image-20250617194842568.png" alt="image-20250617194842568"></p></li></ul><h1>中间件</h1><p>在每次请求和响应之间执行的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__init__():初始化中间件时，自动调用一次</span><br><span class="line"></span><br><span class="line">process_request():请求前</span><br><span class="line"></span><br><span class="line">process_response():响应前</span><br></pre></td></tr></table></figure><h1>后端服务的项目架构</h1><p>数据存储服务：mysql</p><p>缓存服务：Redis</p><p>异步服务：Celery</p><p>消息队列：RabbitMQ、Redis、Kafka</p><p>文件存储服务：FastDFS</p><p>全文检索：Elasticsearch</p><p>部署：Nginx(负载均衡)+uwsgi</p><p>定时任务：Crontab</p><h1>同源</h1><p>需要协议，域名，端口号都相同</p><h1>CORS</h1><p>因为前端与后端不同源，使用cors实现跨域，设置白名单，前端可以获取后端的数据</p><h1>短信发送</h1><p>容联云网站，下载python版本的demo</p><p>短信验证码业务流程：</p><p>前端发送一个axios请求，包括手机号，验证码，图形验证码的UUID</p><p>后端接收请求参数，包括手机号，验证码，图形验证码的UUID</p><p>业务逻辑：验证参数，验证图片验证码，生成短信验证码，保存短信验证码，发送短信验证码</p><p>响应：返回响应{‘code’:0, ‘errmsg’:‘ok’}</p><h3 id="管道技术">管道技术</h3><p>通过一个队列，一次同时包含多个请求，降低服务器频繁调用radis，提高执行效率</p><h3 id="异步Celery">异步Celery</h3><ul><li>生产者-消费者模式，使用消息队列（中间人：broker）分割（解耦）协调生产者和消费者</li><li>消息队列不执行任务，存储和转发任务</li><li>Celery可以实现存储转发任务，也可以实现执行任务</li></ul><h3 id="记住密码">记住密码</h3><p>是设置session过期时间，不是浏览器的记住账号和密码</p><h3 id="itsdangerous数据加密">itsdangerous数据加密</h3><p>itsdangerous对openid进行加密和解密。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Session&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Django项目默认启动Session。可以保存在数据库或内存，也可以混合存储&lt;/li&gt;
&lt;li&gt;将session放入redis，放入内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;面向对象&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三大特性&lt;/</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://wenblog.org.edu.kg/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://wenblog.org.edu.kg/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于python的一些问题</title>
    <link href="https://wenblog.org.edu.kg/posts/4bfb6141.html"/>
    <id>https://wenblog.org.edu.kg/posts/4bfb6141.html</id>
    <published>2024-06-29T13:51:31.000Z</published>
    <updated>2024-06-29T13:51:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1>python问题</h1><ul><li><p>相对引用问题</p></li><li><pre><code>from ..modeling.image_encoder import DTEncoder<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```  <span class="built_in">shell</span></span><br><span class="line">ImportError: attempted <span class="built_in">relative</span> import <span class="keyword">with</span> no known parent package</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>解决：</p><p><img src="https://i.postimg.cc/jSYj7ssb/1719669469.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在上一级设为Sources，要引用下级文件直接用绝对路径引用</span><br></pre></td></tr></table></figure><p><img src="https://i.postimg.cc/DzMQFJTh/1719669749.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;python问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相对引用问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;from ..modeling.image_encoder import DTEncoder
&lt;figure class=&quot;highlight live</summary>
      
    
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MEA-EFFormer</title>
    <link href="https://wenblog.org.edu.kg/posts/d3bdf607.html"/>
    <id>https://wenblog.org.edu.kg/posts/d3bdf607.html</id>
    <published>2024-04-28T11:09:10.000Z</published>
    <updated>2024-04-28T11:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>MEA-EFFormer：基于增强特征Transformer的多尺度有效注意力算法及其在高光谱图像分类中的应用</strong></h1><p><img src="https://i.postimg.cc/0yD1hzbh/1714313204.png" alt=""></p><h3 id="主旨">主旨</h3><p>考虑光谱与空间特征的深层联系</p><h3 id="创新点">创新点</h3><ul><li><p>局部二进制模式（LBP）提取局部空间特征</p><p>该方法最早在1996年提出，是纹理分类和人脸识别领域的主要特征提取方法之一。</p><p><img src="https://img-blog.csdn.net/20160610171624094" alt=""></p></li></ul><p>优势：</p><p>1)计算复杂度低;</p><p>2)无需训练学习;</p><p>3)光照不变性;</p><p>4)灰度不变性；</p><p>5)旋转不变性。</p><p>方法：以3×3矩阵中心点为阈值，四周比它大的或等于它的值设为1，比它小的设为0，从x轴的正方向出发逆时针转动，2的指数从0到7设计相同形状的3×3矩阵并将二进制转为十进制数字，两个矩阵相同位置的元素相乘，得到一个局部二进制模式。</p><p><img src="https://i.postimg.cc/2y7RdbLR/1714310446.png" alt=""></p><p>其中S_lbp是相邻像素的二进制位，I（x，y）是相邻像素的灰度值，并且I_c是中心像素的灰度值。P是邻域中像素的数量，R是邻域的半径，并且（x_p，y_p）是邻域中像素的坐标。</p><ul><li><p>混合二维卷积（2D-CNN）和三维卷积（3D-CNN）提取局部特征，Transformer提取全局特征</p><p>引用一篇论文研究发现二维卷积擅长利用空间特征，但不擅长利用光谱信息；三维卷积同时擅长利用空间特征和光谱信息。介绍多篇论文中的混合卷积模型，要比单使用三维卷积的模型复杂度低，参数减少，增强分类能力等。</p><p>三维卷积方面使用多尺度卷积，即使用不同大小的卷积核在同一时刻分别进行卷积操作，之后改变形状在进行二维卷积，与之前二维卷积的信息进行残差相加。</p></li></ul><h3 id="网络结构核心">网络结构核心</h3><ul><li>多尺度有效注意特征提取模块</li><li>光谱-空间特征增强注意模块</li><li>Transformer编码器</li></ul><h3 id="主要贡献">主要贡献</h3><ul><li>MEA-EFFormer是一个多尺度高效的注意力特征提取模块，它将高效的通道注意力机制与多尺度卷积相结合。它有利于挖掘光谱-空间信息中的细节，并解决了单尺度采样过程中细粒度特征丢失的问题。</li><li>MEA-EFFormer使用SSEA模块。该方法基于C-H、C-W和H-W三个方向，捕捉LBP的频谱-空间信息之间的依赖关系，细化特征的尺度，提高注意机制的感知能力。</li><li>MEA-EFFormer的分类性能优于几种经典方法和SOTA方法。在所有三个知名数据集上的实验表明，该方法具有良好的分类性能。</li></ul><h3 id="网络模型图">网络模型图</h3><p><img src="https://i.postimg.cc/yNKKCtrV/1714306452.png" alt=""></p><ul><li><p>主成分分析（PCA）：对图像形状（m×n×l，长、宽、原始高光谱图像的所有波段数）保留最重要的波段，降维成图像形状（m×n×b，长、宽、PCA后的波段数）</p><p>优点：减少特征的维度，降低过拟合的风险</p></li><li><p>Eifficient CA（ECA，高效通道注意力）：使用全局平均池化（GAP）将图像压缩成形状（1×1×C），在使用带有自适应卷积核的一维卷积操作（1×1卷积核）计算每个波段的权重，再引用sigmoid激活函数来映射0和1之间的权重</p></li><li><p>Spectral–Spatial Enhancement Attention（SSEA，光谱-空间增强注意力）：</p><p><img src="https://i.postimg.cc/MKqySqjr/1714312584.png" alt=""></p><p>1、沿着H轴逆时针旋转90度，得到形状（W×H×C），再进行平均池化，最大池化，二维卷积操作；</p><p>2、沿着W轴逆时针旋转90度，得到形状（ H×C×W），再进行平均池化，最大池化，二维卷积操作；</p><p>3、不旋转，原始形状（C×W×H），再进行平均池化，最大池化，二维卷积操作；</p></li></ul><h3 id="总结">总结</h3><p>在本文中，我们提出了一种方法称为多尺度有效的注意力和增强的特征Transformer（MEA-EFFormer）的高光谱图像分类。我们通过多尺度有效的注意特征提取模块获得进一步细化的频谱空间信息。然后将联合收割机的二维卷积特征与局部二值模式（LBP）空间信息相结合，有效地提高了特征的表示能力。然后，我们使用频谱-空间增强注意模块，使特征增强。最后，我们通过Transformer编码器对这些特征进行分类。</p><h3 id="知识点">知识点</h3><ul><li><strong>多尺度卷积（比如特征金字塔）的优势</strong>：<ul><li><strong>多尺度信息</strong>：可以在不同层级的网络中提取特征来获取多尺度信息。在目标检测任务中，目标可能以不同的尺寸出现在图像中，因此需要在不同尺度上进行检测和定位。通过合并不同层次的特征图，可以检测和识别不同尺寸的目标。</li><li><strong>上下文信息</strong>：通过在不同的层级中提取特征，可以捕获更广泛的上下文信息。较深层次的特征通常对于全局语义信息具有较好的把握，而较浅层次的特征可以提供更多局部细节信息。通过多尺度卷积，算法可以在不同层级上同时利用全局和局部信息，从而更好地理解图像内容。</li><li><strong>减少信息丢失</strong>：在深度卷积神经网络中，随着网络层数的增加，特征图的尺寸逐渐减小。这可能导致信息丢失，特别是对于较小目标或细节。通过融合多个尺度的特征，可以减少信息丢失的影响，提高网络的能力。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;strong&gt;MEA-EFFormer：基于增强特征Transformer的多尺度有效注意力算法及其在高光谱图像分类中的应用&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/0yD1hzbh/1714313204.png&quot;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>bug</title>
    <link href="https://wenblog.org.edu.kg/posts/358cbf14.html"/>
    <id>https://wenblog.org.edu.kg/posts/358cbf14.html</id>
    <published>2024-04-28T11:09:10.000Z</published>
    <updated>2024-04-28T11:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FileNotFoundError-WinError-3-系统找不到指定的路径。-‘e-SegmentationClass’">FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ‘e:/SegmentationClass’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOCdevkit_path      = <span class="string">&quot;e:/Datasets/LoveDA&quot;</span></span><br><span class="line">segfilepath     = os.path.join(VOCdevkit_path, <span class="string">&#x27;/SegmentationClass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>'/SegmentationClass’加入“/”，从最后一个以”/”开头的参数开始拼接，之前的参数全部丢弃。</p><p>输出：e:/SegmentationClass</p><p>正确输入：'SegmentationClass’会自动填补“/”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;FileNotFoundError-WinError-3-系统找不到指定的路径。-‘e-SegmentationClass’&quot;&gt;FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ‘e:/SegmentationClass’&lt;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ViT模型详解</title>
    <link href="https://wenblog.org.edu.kg/posts/9336d039.html"/>
    <id>https://wenblog.org.edu.kg/posts/9336d039.html</id>
    <published>2024-04-01T08:23:09.000Z</published>
    <updated>2024-04-01T08:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1>一、网络结构</h1><p><img src="https://i.postimg.cc/T1wvS410/1711960028.png" alt=""></p><h1>二、详情</h1><h3 id="1、补丁嵌入">1、补丁嵌入</h3><ul><li><p>原始图像：H×W×C，高度，宽度，通道数</p></li><li><p>补丁（patch）：N×（P^2×C），</p><p>N=H×W/（P×P）叫补丁数或者输入序列长度</p><p>（P，P）叫补丁的分辨率</p></li></ul><blockquote><p>将图像分割成多个补丁（patch），将补丁平铺成一维数据格式，再通过线性投影将补丁平坦化映射到低维空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rearrange(<span class="string">&#x27;b c (h p1) (w p2) -&gt; b (h w) (p1 p2 c)&#x27;</span>, p1=patch_height, p2=patch_width)</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、位置嵌入">2、位置嵌入</h3><ul><li>添加位置编码表示两个补丁之间的距离，即添加了补丁的位置信息</li></ul><blockquote><p>网络自动学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.pos_embedding = nn.Parameter(torch.randn(<span class="number">1</span>, num_patches + <span class="number">1</span>, dim))</span><br></pre></td></tr></table></figure><p>sin-cos规则</p><ul><li>将向量的维度切分为奇数行和偶数行</li><li>偶数行采用sin函数编码，奇数行采用cos函数编码</li><li>然后按照原始行号拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_position_angle_vec</span>(<span class="params">position</span>):</span><br><span class="line">    <span class="comment"># hid_j是0-511,d_hid是512，position表示单词位置0～N-1</span></span><br><span class="line">    <span class="keyword">return</span> [position / np.power(<span class="number">10000</span>, <span class="number">2</span> * (hid_j // <span class="number">2</span>) / d_hid) <span class="keyword">for</span> hid_j <span class="keyword">in</span> <span class="built_in">range</span>(d_hid)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个单词位置0～N-1都可以编码得到512长度的向量</span></span><br><span class="line">sinusoid_table = np.array([get_position_angle_vec(pos_i) <span class="keyword">for</span> pos_i <span class="keyword">in</span> <span class="built_in">range</span>(n_position)])</span><br><span class="line"><span class="comment"># 偶数列进行sin</span></span><br><span class="line">sinusoid_table[:, <span class="number">0</span>::<span class="number">2</span>] = np.sin(sinusoid_table[:, <span class="number">0</span>::<span class="number">2</span>])  <span class="comment"># dim 2i</span></span><br><span class="line"><span class="comment"># 奇数列进行cos</span></span><br><span class="line">sinusoid_table[:, <span class="number">1</span>::<span class="number">2</span>] = np.cos(sinusoid_table[:, <span class="number">1</span>::<span class="number">2</span>])  <span class="comment"># dim 2i+1</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3、类别标记">3、类别标记</h3><ul><li>输出特征加上一个线性分类器实现分类</li></ul><blockquote><p>cls_token方式，cls位置表示向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.cls_token = nn.Parameter(torch.randn(<span class="number">1</span>, <span class="number">1</span>, dim))</span><br><span class="line"></span><br><span class="line">cls_tokens = repeat(self.cls_token, <span class="string">&#x27;1 1 d -&gt; b 1 d&#x27;</span>, b=b)  <span class="comment"># 复制令牌，并生成新的转变为（B,N,D）格式的张量</span></span><br><span class="line">x = torch.cat((cls_tokens, x), dim=<span class="number">1</span>)  <span class="comment"># 类别标记拼接补丁嵌入</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4、Transformer编码器">4、Transformer编码器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Attention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dim, heads=<span class="number">8</span>, dim_head=<span class="number">64</span>, dropout=<span class="number">0.</span></span>):  <span class="comment"># dim_head每个头的维度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        inner_dim = dim_head * heads  <span class="comment"># 所有头的维度</span></span><br><span class="line">        project_out = <span class="keyword">not</span> (heads == <span class="number">1</span> <span class="keyword">and</span> dim_head == dim)  <span class="comment"># 不是一个头和每个头的维度等于总维度同时成立时，返回true</span></span><br><span class="line"></span><br><span class="line">        self.heads = heads  <span class="comment"># 注意力头数</span></span><br><span class="line">        self.scale = dim_head ** -<span class="number">0.5</span>  <span class="comment"># 缩放因子</span></span><br><span class="line"></span><br><span class="line">        self.norm = nn.LayerNorm(dim)  <span class="comment"># 层归一化</span></span><br><span class="line"></span><br><span class="line">        self.attend = nn.Softmax(dim=-<span class="number">1</span>)  <span class="comment"># 均匀分布在[0,1]之间</span></span><br><span class="line">        self.dropout = nn.Dropout(dropout)  <span class="comment"># 丢弃层</span></span><br><span class="line"></span><br><span class="line">        self.to_qkv = nn.Linear(dim, inner_dim * <span class="number">3</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># inner_dim乘以三，因为输出分成查询，键，值，每个部分的维度都是inner_dim，过程相当于三次全连接层</span></span><br><span class="line"></span><br><span class="line">        self.to_out = nn.Sequential(</span><br><span class="line">            nn.Linear(inner_dim, dim),</span><br><span class="line">            nn.Dropout(dropout)</span><br><span class="line">        ) <span class="keyword">if</span> project_out <span class="keyword">else</span> nn.Identity()  <span class="comment"># 若是多头注意力，则进入全连接层，丢弃层；若不是，则恒等映射，不做任何操作输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.norm(x)  <span class="comment"># 层归一化</span></span><br><span class="line"></span><br><span class="line">        qkv = self.to_qkv(x).chunk(<span class="number">3</span>, dim=-<span class="number">1</span>)  <span class="comment"># 三次全连接后将最后一个维度分成三份</span></span><br><span class="line">        q, k, v = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: rearrange(t, <span class="string">&#x27;b n (h d) -&gt; b h n d&#x27;</span>, h=self.heads), qkv)</span><br><span class="line">        <span class="comment"># b是batch_size,h是注意力头数，n是输入序列长度（输入图像分割成图块的数量patches）</span></span><br><span class="line"></span><br><span class="line">        dots = torch.matmul(q, k.transpose(-<span class="number">1</span>, -<span class="number">2</span>)) * self.scale  <span class="comment"># q乘以k的转置，再乘以1/根号dim_head</span></span><br><span class="line"></span><br><span class="line">        attn = self.attend(dots)  <span class="comment"># softmax</span></span><br><span class="line">        attn = self.dropout(attn)  <span class="comment"># 丢弃层</span></span><br><span class="line"></span><br><span class="line">        out = torch.matmul(attn, v)  <span class="comment"># 再乘以v</span></span><br><span class="line">        out = rearrange(out, <span class="string">&#x27;b h n d -&gt; b n (h d)&#x27;</span>)  <span class="comment"># 恢复原状</span></span><br><span class="line">        <span class="keyword">return</span> self.to_out(out)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、MLP多层感知机-前馈神经网络">5、MLP多层感知机/前馈神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FeedForward</span>(nn.Module):  <span class="comment"># 前馈神经网络FFN，也叫多层感知机MLP</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dim, hidden_dim, dropout=<span class="number">0.</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            nn.LayerNorm(dim),  <span class="comment"># 层归一化</span></span><br><span class="line">            nn.Linear(dim, hidden_dim),  <span class="comment"># 全连接层</span></span><br><span class="line">            nn.GELU(),  <span class="comment"># GELU激活函数</span></span><br><span class="line">            nn.Dropout(dropout),  <span class="comment"># 丢弃层</span></span><br><span class="line">            nn.Linear(hidden_dim, dim),  <span class="comment"># 全连接层</span></span><br><span class="line">            nn.Dropout(dropout)  <span class="comment"># 丢弃层</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;一、网络结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/T1wvS410/1711960028.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1&gt;二、详情&lt;/h1&gt;
&lt;h3 id=&quot;1、补丁嵌入&quot;&gt;1、补丁嵌入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>minconda常用命令</title>
    <link href="https://wenblog.org.edu.kg/posts/b73499b6.html"/>
    <id>https://wenblog.org.edu.kg/posts/b73499b6.html</id>
    <published>2024-03-25T12:01:16.000Z</published>
    <updated>2024-03-25T12:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1>一、基础</h1><ul><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure></li><li><p>查看环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show</span><br></pre></td></tr></table></figure></li><li><p>创建环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_name python=3.8</span><br></pre></td></tr></table></figure></li><li><p>激活环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate env_name</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate env_name</span><br></pre></td></tr></table></figure></li></ul><h1>二、安装pytorch</h1><ul><li><p>查看CUDA版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure></li><li><p>cuda 12.1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;一、基础&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看版本&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://wenblog.org.edu.kg/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://wenblog.org.edu.kg/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>VisionTransformer快速指南-理论和代码</title>
    <link href="https://wenblog.org.edu.kg/posts/be423323.html"/>
    <id>https://wenblog.org.edu.kg/posts/be423323.html</id>
    <published>2024-02-25T06:47:19.000Z</published>
    <updated>2024-02-25T06:47:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1>0、ViT简介</h1><p><img src="https://i.postimg.cc/BQZH7s2d/1708844417.png" alt=""></p><h1>1、输入嵌入</h1><p><img src="https://i.postimg.cc/J4PP6sJV/1708843905.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;0、ViT简介&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/BQZH7s2d/1708844417.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1&gt;1、输入嵌入&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/J4</summary>
      
    
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://wenblog.org.edu.kg/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
